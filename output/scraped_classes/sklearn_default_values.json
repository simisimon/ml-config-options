[
    {
        "full_name": "sklearn.base.BaseEstimator",
        "name": "BaseEstimator",
        "params": {}
    },
    {
        "full_name": "sklearn.base.BiclusterMixin",
        "name": "BiclusterMixin",
        "params": {}
    },
    {
        "full_name": "sklearn.base.ClassifierMixin",
        "name": "ClassifierMixin",
        "params": {}
    },
    {
        "full_name": "sklearn.base.ClusterMixin",
        "name": "ClusterMixin",
        "params": {}
    },
    {
        "full_name": "sklearn.base.DensityMixin",
        "name": "DensityMixin",
        "params": {}
    },
    {
        "full_name": "sklearn.base.RegressorMixin",
        "name": "RegressorMixin",
        "params": {}
    },
    {
        "full_name": "sklearn.base.TransformerMixin",
        "name": "TransformerMixin",
        "params": {}
    },
    {
        "full_name": "sklearn.feature_selection.SelectorMixin",
        "name": "SelectorMixin",
        "params": {}
    },
    {
        "full_name": "sklearn.base.clone",
        "name": "clone",
        "params": {
            "estimator": null,
            "safe": "True"
        }
    },
    {
        "full_name": "sklearn.base.is_classifier",
        "name": "is_classifier",
        "params": {
            "estimator": null
        }
    },
    {
        "full_name": "sklearn.base.is_regressor",
        "name": "is_regressor",
        "params": {
            "estimator": null
        }
    },
    {
        "full_name": "sklearn.config_context",
        "name": "config_context",
        "params": {
            "assume_finite": "None",
            "working_memory": "None",
            "print_changed_only": "None",
            "display": "None",
            "pairwise_dist_chunk_size": "None",
            "enable_cython_pairwise_dist": "None"
        }
    },
    {
        "full_name": "sklearn.get_config",
        "name": "get_config",
        "params": {}
    },
    {
        "full_name": "sklearn.set_config",
        "name": "set_config",
        "params": {
            "assume_finite": "None",
            "working_memory": "None",
            "print_changed_only": "None",
            "display": "None",
            "pairwise_dist_chunk_size": "None",
            "enable_cython_pairwise_dist": "None"
        }
    },
    {
        "full_name": "sklearn.show_versions",
        "name": "show_versions",
        "params": {}
    },
    {
        "full_name": "sklearn.calibration.CalibratedClassifierCV",
        "name": "CalibratedClassifierCV",
        "params": {
            "base_estimator": "None",
            "method": "'sigmoid'",
            "cv": "None",
            "n_jobs": "None",
            "ensemble": "True"
        }
    },
    {
        "full_name": "sklearn.calibration.calibration_curve",
        "name": "calibration_curve",
        "params": {
            "y_true": null,
            "y_prob": null,
            "pos_label": "None",
            "normalize": "'deprecated'",
            "n_bins": "5",
            "strategy": "'uniform'"
        }
    },
    {
        "full_name": "sklearn.cluster.AffinityPropagation",
        "name": "AffinityPropagation",
        "params": {
            "damping": "0.5",
            "max_iter": "200",
            "convergence_iter": "15",
            "copy": "True",
            "preference": "None",
            "affinity": "'euclidean'",
            "verbose": "False",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.cluster.AgglomerativeClustering",
        "name": "AgglomerativeClustering",
        "params": {
            "n_clusters": "2",
            "affinity": "'euclidean'",
            "memory": "None",
            "connectivity": "None",
            "compute_full_tree": "'auto'",
            "linkage": "'ward'",
            "distance_threshold": "None",
            "compute_distances": "False"
        }
    },
    {
        "full_name": "sklearn.cluster.Birch",
        "name": "Birch",
        "params": {
            "threshold": "0.5",
            "branching_factor": "50",
            "n_clusters": "3",
            "compute_labels": "True",
            "copy": "True"
        }
    },
    {
        "full_name": "sklearn.cluster.DBSCAN",
        "name": "DBSCAN",
        "params": {
            "eps": "0.5",
            "min_samples": "5",
            "metric": "'euclidean'",
            "metric_params": "None",
            "algorithm": "'auto'",
            "leaf_size": "30",
            "p": "None",
            "n_jobs": "None"
        }
    },
    {
        "full_name": "sklearn.cluster.FeatureAgglomeration",
        "name": "FeatureAgglomeration",
        "params": {
            "n_clusters": "2",
            "affinity": "'euclidean'",
            "memory": "None",
            "connectivity": "None",
            "compute_full_tree": "'auto'",
            "linkage": "'ward'",
            "pooling_func": "<function mean>",
            "distance_threshold": "None",
            "compute_distances": "False"
        }
    },
    {
        "full_name": "sklearn.cluster.KMeans",
        "name": "KMeans",
        "params": {
            "n_clusters": "8",
            "init": "'k-means++'",
            "n_init": "10",
            "max_iter": "300",
            "tol": "0.0001",
            "verbose": "0",
            "random_state": "None",
            "copy_x": "True",
            "algorithm": "'lloyd'"
        }
    },
    {
        "full_name": "sklearn.cluster.BisectingKMeans",
        "name": "BisectingKMeans",
        "params": {
            "n_clusters": "8",
            "init": "'random'",
            "n_init": "1",
            "random_state": "None",
            "max_iter": "300",
            "verbose": "0",
            "tol": "0.0001",
            "copy_x": "True",
            "algorithm": "'lloyd'",
            "bisecting_strategy": "'biggest_inertia'"
        }
    },
    {
        "full_name": "sklearn.cluster.MiniBatchKMeans",
        "name": "MiniBatchKMeans",
        "params": {
            "n_clusters": "8",
            "init": "'k-means++'",
            "max_iter": "100",
            "batch_size": "1024",
            "verbose": "0",
            "compute_labels": "True",
            "random_state": "None",
            "tol": "0.0",
            "max_no_improvement": "10",
            "init_size": "None",
            "n_init": "3",
            "reassignment_ratio": "0.01"
        }
    },
    {
        "full_name": "sklearn.cluster.MeanShift",
        "name": "MeanShift",
        "params": {
            "bandwidth": "None",
            "seeds": "None",
            "bin_seeding": "False",
            "min_bin_freq": "1",
            "cluster_all": "True",
            "n_jobs": "None",
            "max_iter": "300"
        }
    },
    {
        "full_name": "sklearn.cluster.OPTICS",
        "name": "OPTICS",
        "params": {
            "min_samples": "5",
            "max_eps": "inf",
            "metric": "'minkowski'",
            "p": "2",
            "metric_params": "None",
            "cluster_method": "'xi'",
            "eps": "None",
            "xi": "0.05",
            "predecessor_correction": "True",
            "min_cluster_size": "None",
            "algorithm": "'auto'",
            "leaf_size": "30",
            "memory": "None",
            "n_jobs": "None"
        }
    },
    {
        "full_name": "sklearn.cluster.SpectralClustering",
        "name": "SpectralClustering",
        "params": {
            "n_clusters": "8",
            "eigen_solver": "None",
            "n_components": "None",
            "random_state": "None",
            "n_init": "10",
            "gamma": "1.0",
            "affinity": "'rbf'",
            "n_neighbors": "10",
            "eigen_tol": "0.0",
            "assign_labels": "'kmeans'",
            "degree": "3",
            "coef0": "1",
            "kernel_params": "None",
            "n_jobs": "None",
            "verbose": "False"
        }
    },
    {
        "full_name": "sklearn.cluster.SpectralBiclustering",
        "name": "SpectralBiclustering",
        "params": {
            "n_clusters": "3",
            "method": "'bistochastic'",
            "n_components": "6",
            "n_best": "3",
            "svd_method": "'randomized'",
            "n_svd_vecs": "None",
            "mini_batch": "False",
            "init": "'k-means++'",
            "n_init": "10",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.cluster.SpectralCoclustering",
        "name": "SpectralCoclustering",
        "params": {
            "n_clusters": "3",
            "svd_method": "'randomized'",
            "n_svd_vecs": "None",
            "mini_batch": "False",
            "init": "'k-means++'",
            "n_init": "10",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.cluster.affinity_propagation",
        "name": "affinity_propagation",
        "params": {
            "S": null,
            "preference": "None",
            "convergence_iter": "15",
            "max_iter": "200",
            "damping": "0.5",
            "copy": "True",
            "verbose": "False",
            "return_n_iter": "False",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.cluster.cluster_optics_dbscan",
        "name": "cluster_optics_dbscan",
        "params": {
            "reachability": null,
            "core_distances": null,
            "ordering": null,
            "eps": null
        }
    },
    {
        "full_name": "sklearn.cluster.cluster_optics_xi",
        "name": "cluster_optics_xi",
        "params": {
            "reachability": null,
            "predecessor": null,
            "ordering": null,
            "min_samples": null,
            "min_cluster_size": "None",
            "xi": "0.05",
            "predecessor_correction": "True"
        }
    },
    {
        "full_name": "sklearn.cluster.compute_optics_graph",
        "name": "compute_optics_graph",
        "params": {
            "X": null,
            "min_samples": null,
            "max_eps": null,
            "metric": null,
            "p": null,
            "metric_params": null,
            "algorithm": null,
            "leaf_size": null,
            "n_jobs": null
        }
    },
    {
        "full_name": "sklearn.cluster.dbscan",
        "name": "dbscan",
        "params": {
            "X": null,
            "eps": "0.5",
            "min_samples": "5",
            "metric": "'minkowski'",
            "metric_params": "None",
            "algorithm": "'auto'",
            "leaf_size": "30",
            "p": "2",
            "sample_weight": "None",
            "n_jobs": "None"
        }
    },
    {
        "full_name": "sklearn.cluster.estimate_bandwidth",
        "name": "estimate_bandwidth",
        "params": {
            "X": null,
            "quantile": "0.3",
            "n_samples": "None",
            "random_state": "0",
            "n_jobs": "None"
        }
    },
    {
        "full_name": "sklearn.cluster.k_means",
        "name": "k_means",
        "params": {
            "X": null,
            "n_clusters": null,
            "sample_weight": "None",
            "init": "'k-means++'",
            "n_init": "10",
            "max_iter": "300",
            "verbose": "False",
            "tol": "0.0001",
            "random_state": "None",
            "copy_x": "True",
            "algorithm": "'lloyd'",
            "return_n_iter": "False"
        }
    },
    {
        "full_name": "sklearn.cluster.kmeans_plusplus",
        "name": "kmeans_plusplus",
        "params": {
            "X": null,
            "n_clusters": null,
            "x_squared_norms": "None",
            "random_state": "None",
            "n_local_trials": "None"
        }
    },
    {
        "full_name": "sklearn.cluster.mean_shift",
        "name": "mean_shift",
        "params": {
            "X": null,
            "bandwidth": "None",
            "seeds": "None",
            "bin_seeding": "False",
            "min_bin_freq": "1",
            "cluster_all": "True",
            "max_iter": "300",
            "n_jobs": "None"
        }
    },
    {
        "full_name": "sklearn.cluster.spectral_clustering",
        "name": "spectral_clustering",
        "params": {
            "affinity": null,
            "n_clusters": "8",
            "n_components": "None",
            "eigen_solver": "None",
            "random_state": "None",
            "n_init": "10",
            "eigen_tol": "0.0",
            "assign_labels": "'kmeans'",
            "verbose": "False"
        }
    },
    {
        "full_name": "sklearn.cluster.ward_tree",
        "name": "ward_tree",
        "params": {
            "X": null,
            "connectivity": "None",
            "n_clusters": "None",
            "return_distance": "False"
        }
    },
    {
        "full_name": "sklearn.compose.ColumnTransformer",
        "name": "ColumnTransformer",
        "params": {
            "transformers": null,
            "remainder": "'drop'",
            "sparse_threshold": "0.3",
            "n_jobs": "None",
            "transformer_weights": "None",
            "verbose": "False",
            "verbose_feature_names_out": "True"
        }
    },
    {
        "full_name": "sklearn.compose.TransformedTargetRegressor",
        "name": "TransformedTargetRegressor",
        "params": {
            "regressor": "None",
            "transformer": "None",
            "func": "None",
            "inverse_func": "None",
            "check_inverse": "True"
        }
    },
    {
        "full_name": "sklearn.compose.make_column_transformer",
        "name": "make_column_transformer",
        "params": {
            "*transformers": null,
            "remainder": "'drop'",
            "sparse_threshold": "0.3",
            "n_jobs": "None",
            "verbose": "False",
            "verbose_feature_names_out": "True"
        }
    },
    {
        "full_name": "sklearn.compose.make_column_selector",
        "name": "make_column_selector",
        "params": {
            "pattern": "None",
            "dtype_include": "None",
            "dtype_exclude": "None"
        }
    },
    {
        "full_name": "sklearn.covariance.EmpiricalCovariance",
        "name": "EmpiricalCovariance",
        "params": {
            "store_precision": "True",
            "assume_centered": "False"
        }
    },
    {
        "full_name": "sklearn.covariance.EllipticEnvelope",
        "name": "EllipticEnvelope",
        "params": {
            "store_precision": "True",
            "assume_centered": "False",
            "support_fraction": "None",
            "contamination": "0.1",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.covariance.GraphicalLasso",
        "name": "GraphicalLasso",
        "params": {
            "alpha": "0.01",
            "mode": "'cd'",
            "tol": "0.0001",
            "enet_tol": "0.0001",
            "max_iter": "100",
            "verbose": "False",
            "assume_centered": "False"
        }
    },
    {
        "full_name": "sklearn.covariance.GraphicalLassoCV",
        "name": "GraphicalLassoCV",
        "params": {
            "alphas": "4",
            "n_refinements": "4",
            "cv": "None",
            "tol": "0.0001",
            "enet_tol": "0.0001",
            "max_iter": "100",
            "mode": "'cd'",
            "n_jobs": "None",
            "verbose": "False",
            "assume_centered": "False"
        }
    },
    {
        "full_name": "sklearn.covariance.LedoitWolf",
        "name": "LedoitWolf",
        "params": {
            "store_precision": "True",
            "assume_centered": "False",
            "block_size": "1000"
        }
    },
    {
        "full_name": "sklearn.covariance.MinCovDet",
        "name": "MinCovDet",
        "params": {
            "store_precision": "True",
            "assume_centered": "False",
            "support_fraction": "None",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.covariance.OAS",
        "name": "OAS",
        "params": {
            "store_precision": "True",
            "assume_centered": "False"
        }
    },
    {
        "full_name": "sklearn.covariance.ShrunkCovariance",
        "name": "ShrunkCovariance",
        "params": {
            "store_precision": "True",
            "assume_centered": "False",
            "shrinkage": "0.1"
        }
    },
    {
        "full_name": "sklearn.covariance.empirical_covariance",
        "name": "empirical_covariance",
        "params": {
            "X": null,
            "assume_centered": "False"
        }
    },
    {
        "full_name": "sklearn.covariance.graphical_lasso",
        "name": "graphical_lasso",
        "params": {
            "emp_cov": null,
            "alpha": null,
            "cov_init": "None",
            "mode": "'cd'",
            "tol": "0.0001",
            "enet_tol": "0.0001",
            "max_iter": "100",
            "verbose": "False",
            "return_costs": "False",
            "eps": "2.220446049250313e-16",
            "return_n_iter": "False"
        }
    },
    {
        "full_name": "sklearn.covariance.ledoit_wolf",
        "name": "ledoit_wolf",
        "params": {
            "X": null,
            "assume_centered": "False",
            "block_size": "1000"
        }
    },
    {
        "full_name": "sklearn.covariance.oas",
        "name": "oas",
        "params": {
            "X": null,
            "assume_centered": "False"
        }
    },
    {
        "full_name": "sklearn.covariance.shrunk_covariance",
        "name": "shrunk_covariance",
        "params": {
            "emp_cov": null,
            "shrinkage": "0.1"
        }
    },
    {
        "full_name": "sklearn.cross_decomposition.CCA",
        "name": "CCA",
        "params": {
            "n_components": "2",
            "scale": "True",
            "max_iter": "500",
            "tol": "1e-06",
            "copy": "True"
        }
    },
    {
        "full_name": "sklearn.cross_decomposition.PLSCanonical",
        "name": "PLSCanonical",
        "params": {
            "n_components": "2",
            "scale": "True",
            "algorithm": "'nipals'",
            "max_iter": "500",
            "tol": "1e-06",
            "copy": "True"
        }
    },
    {
        "full_name": "sklearn.cross_decomposition.PLSRegression",
        "name": "PLSRegression",
        "params": {
            "n_components": "2",
            "scale": "True",
            "max_iter": "500",
            "tol": "1e-06",
            "copy": "True"
        }
    },
    {
        "full_name": "sklearn.cross_decomposition.PLSSVD",
        "name": "PLSSVD",
        "params": {
            "n_components": "2",
            "scale": "True",
            "copy": "True"
        }
    },
    {
        "full_name": "sklearn.datasets.clear_data_home",
        "name": "clear_data_home",
        "params": {
            "data_home": "None"
        }
    },
    {
        "full_name": "sklearn.datasets.dump_svmlight_file",
        "name": "dump_svmlight_file",
        "params": {
            "X": null,
            "y": null,
            "f": null,
            "zero_based": "True",
            "comment": "None",
            "query_id": "None",
            "multilabel": "False"
        }
    },
    {
        "full_name": "sklearn.datasets.fetch_20newsgroups",
        "name": "fetch_20newsgroups",
        "params": {
            "data_home": "None",
            "subset": "'train'",
            "categories": "None",
            "shuffle": "True",
            "random_state": "42",
            "remove": "()",
            "download_if_missing": "True",
            "return_X_y": "False"
        }
    },
    {
        "full_name": "sklearn.datasets.fetch_20newsgroups_vectorized",
        "name": "fetch_20newsgroups_vectorized",
        "params": {
            "subset": "'train'",
            "remove": "()",
            "data_home": "None",
            "download_if_missing": "True",
            "return_X_y": "False",
            "normalize": "True",
            "as_frame": "False"
        }
    },
    {
        "full_name": "sklearn.datasets.fetch_california_housing",
        "name": "fetch_california_housing",
        "params": {
            "data_home": "None",
            "download_if_missing": "True",
            "return_X_y": "False",
            "as_frame": "False"
        }
    },
    {
        "full_name": "sklearn.datasets.fetch_covtype",
        "name": "fetch_covtype",
        "params": {
            "data_home": "None",
            "download_if_missing": "True",
            "random_state": "None",
            "shuffle": "False",
            "return_X_y": "False",
            "as_frame": "False"
        }
    },
    {
        "full_name": "sklearn.datasets.fetch_kddcup99",
        "name": "fetch_kddcup99",
        "params": {
            "subset": "None",
            "data_home": "None",
            "shuffle": "False",
            "random_state": "None",
            "percent10": "True",
            "download_if_missing": "True",
            "return_X_y": "False",
            "as_frame": "False"
        }
    },
    {
        "full_name": "sklearn.datasets.fetch_lfw_pairs",
        "name": "fetch_lfw_pairs",
        "params": {
            "subset": "'train'",
            "data_home": "None",
            "funneled": "True",
            "resize": "0.5",
            "color": "False",
            "slice_": "(slice(70, 195, None), slice(78, 172, None))",
            "download_if_missing": "True"
        }
    },
    {
        "full_name": "sklearn.datasets.fetch_lfw_people",
        "name": "fetch_lfw_people",
        "params": {
            "data_home": "None",
            "funneled": "True",
            "resize": "0.5",
            "min_faces_per_person": "0",
            "color": "False",
            "slice_": "(slice(70, 195, None), slice(78, 172, None))",
            "download_if_missing": "True",
            "return_X_y": "False"
        }
    },
    {
        "full_name": "sklearn.datasets.fetch_olivetti_faces",
        "name": "fetch_olivetti_faces",
        "params": {
            "data_home": "None",
            "shuffle": "False",
            "random_state": "0",
            "download_if_missing": "True",
            "return_X_y": "False"
        }
    },
    {
        "full_name": "sklearn.datasets.fetch_openml",
        "name": "fetch_openml",
        "params": {
            "name": "None",
            "version": "'active'",
            "data_id": "None",
            "data_home": "None",
            "target_column": "'default-target'",
            "cache": "True",
            "return_X_y": "False",
            "as_frame": "'auto'",
            "n_retries": "3",
            "delay": "1.0"
        }
    },
    {
        "full_name": "sklearn.datasets.fetch_rcv1",
        "name": "fetch_rcv1",
        "params": {
            "data_home": "None",
            "subset": "'all'",
            "download_if_missing": "True",
            "random_state": "None",
            "shuffle": "False",
            "return_X_y": "False"
        }
    },
    {
        "full_name": "sklearn.datasets.fetch_species_distributions",
        "name": "fetch_species_distributions",
        "params": {
            "data_home": "None",
            "download_if_missing": "True"
        }
    },
    {
        "full_name": "sklearn.datasets.get_data_home",
        "name": "get_data_home",
        "params": {
            "data_home": "None"
        }
    },
    {
        "full_name": "sklearn.datasets.load_boston",
        "name": "load_boston",
        "params": {
            "return_X_y": "False"
        }
    },
    {
        "full_name": "sklearn.datasets.load_breast_cancer",
        "name": "load_breast_cancer",
        "params": {
            "return_X_y": "False",
            "as_frame": "False"
        }
    },
    {
        "full_name": "sklearn.datasets.load_diabetes",
        "name": "load_diabetes",
        "params": {
            "return_X_y": "False",
            "as_frame": "False",
            "scaled": "True"
        }
    },
    {
        "full_name": "sklearn.datasets.load_digits",
        "name": "load_digits",
        "params": {
            "n_class": "10",
            "return_X_y": "False",
            "as_frame": "False"
        }
    },
    {
        "full_name": "sklearn.datasets.load_files",
        "name": "load_files",
        "params": {
            "container_path": null,
            "description": "None",
            "categories": "None",
            "load_content": "True",
            "shuffle": "True",
            "encoding": "None",
            "decode_error": "'strict'",
            "random_state": "0",
            "allowed_extensions": "None"
        }
    },
    {
        "full_name": "sklearn.datasets.load_iris",
        "name": "load_iris",
        "params": {
            "return_X_y": "False",
            "as_frame": "False"
        }
    },
    {
        "full_name": "sklearn.datasets.load_linnerud",
        "name": "load_linnerud",
        "params": {
            "return_X_y": "False",
            "as_frame": "False"
        }
    },
    {
        "full_name": "sklearn.datasets.load_sample_image",
        "name": "load_sample_image",
        "params": {
            "image_name": null
        }
    },
    {
        "full_name": "sklearn.datasets.load_sample_images",
        "name": "load_sample_images",
        "params": {}
    },
    {
        "full_name": "sklearn.datasets.load_svmlight_file",
        "name": "load_svmlight_file",
        "params": {
            "f": null,
            "n_features": "None",
            "dtype": "<class 'numpy.float64'>",
            "multilabel": "False",
            "zero_based": "'auto'",
            "query_id": "False",
            "offset": "0",
            "length": "-1"
        }
    },
    {
        "full_name": "sklearn.datasets.load_svmlight_files",
        "name": "load_svmlight_files",
        "params": {
            "files": null,
            "n_features": "None",
            "dtype": "<class 'numpy.float64'>",
            "multilabel": "False",
            "zero_based": "'auto'",
            "query_id": "False",
            "offset": "0",
            "length": "-1"
        }
    },
    {
        "full_name": "sklearn.datasets.load_wine",
        "name": "load_wine",
        "params": {
            "return_X_y": "False",
            "as_frame": "False"
        }
    },
    {
        "full_name": "sklearn.datasets.make_biclusters",
        "name": "make_biclusters",
        "params": {
            "shape": null,
            "n_clusters": null,
            "noise": "0.0",
            "minval": "10",
            "maxval": "100",
            "shuffle": "True",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.datasets.make_blobs",
        "name": "make_blobs",
        "params": {
            "n_samples": "100",
            "n_features": "2",
            "centers": "None",
            "cluster_std": "1.0",
            "center_box": "(- 10.0, 10.0)",
            "shuffle": "True",
            "random_state": "None",
            "return_centers": "False"
        }
    },
    {
        "full_name": "sklearn.datasets.make_checkerboard",
        "name": "make_checkerboard",
        "params": {
            "shape": null,
            "n_clusters": null,
            "noise": "0.0",
            "minval": "10",
            "maxval": "100",
            "shuffle": "True",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.datasets.make_circles",
        "name": "make_circles",
        "params": {
            "n_samples": "100",
            "shuffle": "True",
            "noise": "None",
            "random_state": "None",
            "factor": "0.8"
        }
    },
    {
        "full_name": "sklearn.datasets.make_classification",
        "name": "make_classification",
        "params": {
            "n_samples": "100",
            "n_features": "20",
            "n_informative": "2",
            "n_redundant": "2",
            "n_repeated": "0",
            "n_classes": "2",
            "n_clusters_per_class": "2",
            "weights": "None",
            "flip_y": "0.01",
            "class_sep": "1.0",
            "hypercube": "True",
            "shift": "0.0",
            "scale": "1.0",
            "shuffle": "True",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.datasets.make_friedman1",
        "name": "make_friedman1",
        "params": {
            "n_samples": "100",
            "n_features": "10",
            "noise": "0.0",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.datasets.make_friedman2",
        "name": "make_friedman2",
        "params": {
            "n_samples": "100",
            "noise": "0.0",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.datasets.make_friedman3",
        "name": "make_friedman3",
        "params": {
            "n_samples": "100",
            "noise": "0.0",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.datasets.make_gaussian_quantiles",
        "name": "make_gaussian_quantiles",
        "params": {
            "mean": "None",
            "cov": "1.0",
            "n_samples": "100",
            "n_features": "2",
            "n_classes": "3",
            "shuffle": "True",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.datasets.make_hastie_10_2",
        "name": "make_hastie_10_2",
        "params": {
            "n_samples": "12000",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.datasets.make_low_rank_matrix",
        "name": "make_low_rank_matrix",
        "params": {
            "n_samples": "100",
            "n_features": "100",
            "effective_rank": "10",
            "tail_strength": "0.5",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.datasets.make_moons",
        "name": "make_moons",
        "params": {
            "n_samples": "100",
            "shuffle": "True",
            "noise": "None",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.datasets.make_multilabel_classification",
        "name": "make_multilabel_classification",
        "params": {
            "n_samples": "100",
            "n_features": "20",
            "n_classes": "5",
            "n_labels": "2",
            "length": "50",
            "allow_unlabeled": "True",
            "sparse": "False",
            "return_indicator": "'dense'",
            "return_distributions": "False",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.datasets.make_regression",
        "name": "make_regression",
        "params": {
            "n_samples": "100",
            "n_features": "100",
            "n_informative": "10",
            "n_targets": "1",
            "bias": "0.0",
            "effective_rank": "None",
            "tail_strength": "0.5",
            "noise": "0.0",
            "shuffle": "True",
            "coef": "False",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.datasets.make_s_curve",
        "name": "make_s_curve",
        "params": {
            "n_samples": "100",
            "noise": "0.0",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.datasets.make_sparse_coded_signal",
        "name": "make_sparse_coded_signal",
        "params": {
            "n_samples": null,
            "n_components": null,
            "n_features": null,
            "n_nonzero_coefs": null,
            "random_state": "None",
            "data_transposed": "'warn'"
        }
    },
    {
        "full_name": "sklearn.datasets.make_sparse_spd_matrix",
        "name": "make_sparse_spd_matrix",
        "params": {
            "dim": "1",
            "alpha": "0.95",
            "norm_diag": "False",
            "smallest_coef": "0.1",
            "largest_coef": "0.9",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.datasets.make_sparse_uncorrelated",
        "name": "make_sparse_uncorrelated",
        "params": {
            "n_samples": "100",
            "n_features": "10",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.datasets.make_spd_matrix",
        "name": "make_spd_matrix",
        "params": {
            "n_dim": null,
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.datasets.make_swiss_roll",
        "name": "make_swiss_roll",
        "params": {
            "n_samples": "100",
            "noise": "0.0",
            "random_state": "None",
            "hole": "False"
        }
    },
    {
        "full_name": "sklearn.decomposition.DictionaryLearning",
        "name": "DictionaryLearning",
        "params": {
            "n_components": "None",
            "alpha": "1",
            "max_iter": "1000",
            "tol": "1e-08",
            "fit_algorithm": "'lars'",
            "transform_algorithm": "'omp'",
            "transform_n_nonzero_coefs": "None",
            "transform_alpha": "None",
            "n_jobs": "None",
            "code_init": "None",
            "dict_init": "None",
            "verbose": "False",
            "split_sign": "False",
            "random_state": "None",
            "positive_code": "False",
            "positive_dict": "False",
            "transform_max_iter": "1000"
        }
    },
    {
        "full_name": "sklearn.decomposition.FactorAnalysis",
        "name": "FactorAnalysis",
        "params": {
            "n_components": "None",
            "tol": "0.01",
            "copy": "True",
            "max_iter": "1000",
            "noise_variance_init": "None",
            "svd_method": "'randomized'",
            "iterated_power": "3",
            "rotation": "None",
            "random_state": "0"
        }
    },
    {
        "full_name": "sklearn.decomposition.FastICA",
        "name": "FastICA",
        "params": {
            "n_components": "None",
            "algorithm": "'parallel'",
            "whiten": "'warn'",
            "fun": "'logcosh'",
            "fun_args": "None",
            "max_iter": "200",
            "tol": "0.0001",
            "w_init": "None",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.decomposition.IncrementalPCA",
        "name": "IncrementalPCA",
        "params": {
            "n_components": "None",
            "whiten": "False",
            "copy": "True",
            "batch_size": "None"
        }
    },
    {
        "full_name": "sklearn.decomposition.KernelPCA",
        "name": "KernelPCA",
        "params": {
            "n_components": "None",
            "kernel": "'linear'",
            "gamma": "None",
            "degree": "3",
            "coef0": "1",
            "kernel_params": "None",
            "alpha": "1.0",
            "fit_inverse_transform": "False",
            "eigen_solver": "'auto'",
            "tol": "0",
            "max_iter": "None",
            "iterated_power": "'auto'",
            "remove_zero_eig": "False",
            "random_state": "None",
            "copy_X": "True",
            "n_jobs": "None"
        }
    },
    {
        "full_name": "sklearn.decomposition.LatentDirichletAllocation",
        "name": "LatentDirichletAllocation",
        "params": {
            "n_components": "10",
            "doc_topic_prior": "None",
            "topic_word_prior": "None",
            "learning_method": "'batch'",
            "learning_decay": "0.7",
            "learning_offset": "10.0",
            "max_iter": "10",
            "batch_size": "128",
            "evaluate_every": "- 1",
            "total_samples": "1000000.0",
            "perp_tol": "0.1",
            "mean_change_tol": "0.001",
            "max_doc_update_iter": "100",
            "n_jobs": "None",
            "verbose": "0",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.decomposition.MiniBatchDictionaryLearning",
        "name": "MiniBatchDictionaryLearning",
        "params": {
            "n_components": "None",
            "alpha": "1",
            "n_iter": "'deprecated'",
            "max_iter": "None",
            "fit_algorithm": "'lars'",
            "n_jobs": "None",
            "batch_size": "'warn'",
            "shuffle": "True",
            "dict_init": "None",
            "transform_algorithm": "'omp'",
            "transform_n_nonzero_coefs": "None",
            "transform_alpha": "None",
            "verbose": "False",
            "split_sign": "False",
            "random_state": "None",
            "positive_code": "False",
            "positive_dict": "False",
            "transform_max_iter": "1000",
            "callback": "None",
            "tol": "0.001",
            "max_no_improvement": "10"
        }
    },
    {
        "full_name": "sklearn.decomposition.MiniBatchSparsePCA",
        "name": "MiniBatchSparsePCA",
        "params": {
            "n_components": "None",
            "alpha": "1",
            "ridge_alpha": "0.01",
            "n_iter": "100",
            "callback": "None",
            "batch_size": "3",
            "verbose": "False",
            "shuffle": "True",
            "n_jobs": "None",
            "method": "'lars'",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.decomposition.NMF",
        "name": "NMF",
        "params": {
            "n_components": "None",
            "init": "None",
            "solver": "'cd'",
            "beta_loss": "'frobenius'",
            "tol": "0.0001",
            "max_iter": "200",
            "random_state": "None",
            "alpha": "'deprecated'",
            "alpha_W": "0.0",
            "alpha_H": "'same'",
            "l1_ratio": "0.0",
            "verbose": "0",
            "shuffle": "False",
            "regularization": "'deprecated'"
        }
    },
    {
        "full_name": "sklearn.decomposition.MiniBatchNMF",
        "name": "MiniBatchNMF",
        "params": {
            "n_components": "None",
            "init": "None",
            "batch_size": "1024",
            "beta_loss": "'frobenius'",
            "tol": "0.0001",
            "max_no_improvement": "10",
            "max_iter": "200",
            "alpha_W": "0.0",
            "alpha_H": "'same'",
            "l1_ratio": "0.0",
            "forget_factor": "0.7",
            "fresh_restarts": "False",
            "fresh_restarts_max_iter": "30",
            "transform_max_iter": "None",
            "random_state": "None",
            "verbose": "0"
        }
    },
    {
        "full_name": "sklearn.decomposition.PCA",
        "name": "PCA",
        "params": {
            "n_components": "None",
            "copy": "True",
            "whiten": "False",
            "svd_solver": "'auto'",
            "tol": "0.0",
            "iterated_power": "'auto'",
            "n_oversamples": "10",
            "power_iteration_normalizer": "'auto'",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.decomposition.SparsePCA",
        "name": "SparsePCA",
        "params": {
            "n_components": "None",
            "alpha": "1",
            "ridge_alpha": "0.01",
            "max_iter": "1000",
            "tol": "1e-08",
            "method": "'lars'",
            "n_jobs": "None",
            "U_init": "None",
            "V_init": "None",
            "verbose": "False",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.decomposition.SparseCoder",
        "name": "SparseCoder",
        "params": {
            "dictionary": null,
            "transform_algorithm": "'omp'",
            "transform_n_nonzero_coefs": "None",
            "transform_alpha": "None",
            "split_sign": "False",
            "n_jobs": "None",
            "positive_code": "False",
            "transform_max_iter": "1000"
        }
    },
    {
        "full_name": "sklearn.decomposition.TruncatedSVD",
        "name": "TruncatedSVD",
        "params": {
            "n_components": "2",
            "algorithm": "'randomized'",
            "n_iter": "5",
            "n_oversamples": "10",
            "power_iteration_normalizer": "'auto'",
            "random_state": "None",
            "tol": "0.0"
        }
    },
    {
        "full_name": "sklearn.decomposition.dict_learning",
        "name": "dict_learning",
        "params": {
            "X": null,
            "n_components": null,
            "alpha": null,
            "max_iter": "100",
            "tol": "1e-08",
            "method": "'lars'",
            "n_jobs": "None",
            "dict_init": "None",
            "code_init": "None",
            "callback": "None",
            "verbose": "False",
            "random_state": "None",
            "return_n_iter": "False",
            "positive_dict": "False",
            "positive_code": "False",
            "method_max_iter": "1000"
        }
    },
    {
        "full_name": "sklearn.decomposition.dict_learning_online",
        "name": "dict_learning_online",
        "params": {
            "X": null,
            "n_components": "2",
            "alpha": "1",
            "n_iter": "'deprecated'",
            "max_iter": "None",
            "return_code": "True",
            "dict_init": "None",
            "callback": "None",
            "batch_size": "'warn'",
            "verbose": "False",
            "shuffle": "True",
            "n_jobs": "None",
            "method": "'lars'",
            "iter_offset": "'deprecated'",
            "random_state": "None",
            "return_inner_stats": "'deprecated'",
            "inner_stats": "'deprecated'",
            "return_n_iter": "'deprecated'",
            "positive_dict": "False",
            "positive_code": "False",
            "method_max_iter": "1000",
            "tol": "0.001",
            "max_no_improvement": "10"
        }
    },
    {
        "full_name": "sklearn.decomposition.fastica",
        "name": "fastica",
        "params": {
            "X": null,
            "n_components": "None",
            "algorithm": "'parallel'",
            "whiten": "'warn'",
            "fun": "'logcosh'",
            "fun_args": "None",
            "max_iter": "200",
            "tol": "0.0001",
            "w_init": "None",
            "random_state": "None",
            "return_X_mean": "False",
            "compute_sources": "True",
            "return_n_iter": "False"
        }
    },
    {
        "full_name": "sklearn.decomposition.non_negative_factorization",
        "name": "non_negative_factorization",
        "params": {
            "X": null,
            "W": "None",
            "H": "None",
            "n_components": "None",
            "init": "None",
            "update_H": "True",
            "solver": "'cd'",
            "beta_loss": "'frobenius'",
            "tol": "0.0001",
            "max_iter": "200",
            "alpha": "'deprecated'",
            "alpha_W": "0.0",
            "alpha_H": "'same'",
            "l1_ratio": "0.0",
            "regularization": "'deprecated'",
            "random_state": "None",
            "verbose": "0",
            "shuffle": "False"
        }
    },
    {
        "full_name": "sklearn.decomposition.sparse_encode",
        "name": "sparse_encode",
        "params": {
            "X": null,
            "dictionary": null,
            "gram": "None",
            "cov": "None",
            "algorithm": "'lasso_lars'",
            "n_nonzero_coefs": "None",
            "alpha": "None",
            "copy_cov": "True",
            "init": "None",
            "max_iter": "1000",
            "n_jobs": "None",
            "check_input": "True",
            "verbose": "0",
            "positive": "False"
        }
    },
    {
        "full_name": "sklearn.discriminant_analysis.LinearDiscriminantAnalysis",
        "name": "LinearDiscriminantAnalysis",
        "params": {
            "solver": "'svd'",
            "shrinkage": "None",
            "priors": "None",
            "n_components": "None",
            "store_covariance": "False",
            "tol": "0.0001",
            "covariance_estimator": "None"
        }
    },
    {
        "full_name": "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis",
        "name": "QuadraticDiscriminantAnalysis",
        "params": {
            "priors": "None",
            "reg_param": "0.0",
            "store_covariance": "False",
            "tol": "0.0001"
        }
    },
    {
        "full_name": "sklearn.dummy.DummyClassifier",
        "name": "DummyClassifier",
        "params": {
            "strategy": "'prior'",
            "random_state": "None",
            "constant": "None"
        }
    },
    {
        "full_name": "sklearn.dummy.DummyRegressor",
        "name": "DummyRegressor",
        "params": {
            "strategy": "'mean'",
            "constant": "None",
            "quantile": "None"
        }
    },
    {
        "full_name": "sklearn.ensemble.AdaBoostClassifier",
        "name": "AdaBoostClassifier",
        "params": {
            "base_estimator": "None",
            "n_estimators": "50",
            "learning_rate": "1.0",
            "algorithm": "'SAMME.R'",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.ensemble.AdaBoostRegressor",
        "name": "AdaBoostRegressor",
        "params": {
            "base_estimator": "None",
            "n_estimators": "50",
            "learning_rate": "1.0",
            "loss": "'linear'",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.ensemble.BaggingClassifier",
        "name": "BaggingClassifier",
        "params": {
            "base_estimator": "None",
            "n_estimators": "10",
            "max_samples": "1.0",
            "max_features": "1.0",
            "bootstrap": "True",
            "bootstrap_features": "False",
            "oob_score": "False",
            "warm_start": "False",
            "n_jobs": "None",
            "random_state": "None",
            "verbose": "0"
        }
    },
    {
        "full_name": "sklearn.ensemble.BaggingRegressor",
        "name": "BaggingRegressor",
        "params": {
            "base_estimator": "None",
            "n_estimators": "10",
            "max_samples": "1.0",
            "max_features": "1.0",
            "bootstrap": "True",
            "bootstrap_features": "False",
            "oob_score": "False",
            "warm_start": "False",
            "n_jobs": "None",
            "random_state": "None",
            "verbose": "0"
        }
    },
    {
        "full_name": "sklearn.ensemble.ExtraTreesClassifier",
        "name": "ExtraTreesClassifier",
        "params": {
            "n_estimators": "100",
            "criterion": "'gini'",
            "max_depth": "None",
            "min_samples_split": "2",
            "min_samples_leaf": "1",
            "min_weight_fraction_leaf": "0.0",
            "max_features": "'sqrt'",
            "max_leaf_nodes": "None",
            "min_impurity_decrease": "0.0",
            "bootstrap": "False",
            "oob_score": "False",
            "n_jobs": "None",
            "random_state": "None",
            "verbose": "0",
            "warm_start": "False",
            "class_weight": "None",
            "ccp_alpha": "0.0",
            "max_samples": "None"
        }
    },
    {
        "full_name": "sklearn.ensemble.ExtraTreesRegressor",
        "name": "ExtraTreesRegressor",
        "params": {
            "n_estimators": "100",
            "criterion": "'squared_error'",
            "max_depth": "None",
            "min_samples_split": "2",
            "min_samples_leaf": "1",
            "min_weight_fraction_leaf": "0.0",
            "max_features": "1.0",
            "max_leaf_nodes": "None",
            "min_impurity_decrease": "0.0",
            "bootstrap": "False",
            "oob_score": "False",
            "n_jobs": "None",
            "random_state": "None",
            "verbose": "0",
            "warm_start": "False",
            "ccp_alpha": "0.0",
            "max_samples": "None"
        }
    },
    {
        "full_name": "sklearn.ensemble.GradientBoostingClassifier",
        "name": "GradientBoostingClassifier",
        "params": {
            "loss": "'log_loss'",
            "learning_rate": "0.1",
            "n_estimators": "100",
            "subsample": "1.0",
            "criterion": "'friedman_mse'",
            "min_samples_split": "2",
            "min_samples_leaf": "1",
            "min_weight_fraction_leaf": "0.0",
            "max_depth": "3",
            "min_impurity_decrease": "0.0",
            "init": "None",
            "random_state": "None",
            "max_features": "None",
            "verbose": "0",
            "max_leaf_nodes": "None",
            "warm_start": "False",
            "validation_fraction": "0.1",
            "n_iter_no_change": "None",
            "tol": "0.0001",
            "ccp_alpha": "0.0"
        }
    },
    {
        "full_name": "sklearn.ensemble.GradientBoostingRegressor",
        "name": "GradientBoostingRegressor",
        "params": {
            "loss": "'squared_error'",
            "learning_rate": "0.1",
            "n_estimators": "100",
            "subsample": "1.0",
            "criterion": "'friedman_mse'",
            "min_samples_split": "2",
            "min_samples_leaf": "1",
            "min_weight_fraction_leaf": "0.0",
            "max_depth": "3",
            "min_impurity_decrease": "0.0",
            "init": "None",
            "random_state": "None",
            "max_features": "None",
            "alpha": "0.9",
            "verbose": "0",
            "max_leaf_nodes": "None",
            "warm_start": "False",
            "validation_fraction": "0.1",
            "n_iter_no_change": "None",
            "tol": "0.0001",
            "ccp_alpha": "0.0"
        }
    },
    {
        "full_name": "sklearn.ensemble.IsolationForest",
        "name": "IsolationForest",
        "params": {
            "n_estimators": "100",
            "max_samples": "'auto'",
            "contamination": "'auto'",
            "max_features": "1.0",
            "bootstrap": "False",
            "n_jobs": "None",
            "random_state": "None",
            "verbose": "0",
            "warm_start": "False"
        }
    },
    {
        "full_name": "sklearn.ensemble.RandomForestClassifier",
        "name": "RandomForestClassifier",
        "params": {
            "n_estimators": "100",
            "criterion": "'gini'",
            "max_depth": "None",
            "min_samples_split": "2",
            "min_samples_leaf": "1",
            "min_weight_fraction_leaf": "0.0",
            "max_features": "'sqrt'",
            "max_leaf_nodes": "None",
            "min_impurity_decrease": "0.0",
            "bootstrap": "True",
            "oob_score": "False",
            "n_jobs": "None",
            "random_state": "None",
            "verbose": "0",
            "warm_start": "False",
            "class_weight": "None",
            "ccp_alpha": "0.0",
            "max_samples": "None"
        }
    },
    {
        "full_name": "sklearn.ensemble.RandomForestRegressor",
        "name": "RandomForestRegressor",
        "params": {
            "n_estimators": "100",
            "criterion": "'squared_error'",
            "max_depth": "None",
            "min_samples_split": "2",
            "min_samples_leaf": "1",
            "min_weight_fraction_leaf": "0.0",
            "max_features": "1.0",
            "max_leaf_nodes": "None",
            "min_impurity_decrease": "0.0",
            "bootstrap": "True",
            "oob_score": "False",
            "n_jobs": "None",
            "random_state": "None",
            "verbose": "0",
            "warm_start": "False",
            "ccp_alpha": "0.0",
            "max_samples": "None"
        }
    },
    {
        "full_name": "sklearn.ensemble.RandomTreesEmbedding",
        "name": "RandomTreesEmbedding",
        "params": {
            "n_estimators": "100",
            "max_depth": "5",
            "min_samples_split": "2",
            "min_samples_leaf": "1",
            "min_weight_fraction_leaf": "0.0",
            "max_leaf_nodes": "None",
            "min_impurity_decrease": "0.0",
            "sparse_output": "True",
            "n_jobs": "None",
            "random_state": "None",
            "verbose": "0",
            "warm_start": "False"
        }
    },
    {
        "full_name": "sklearn.ensemble.StackingClassifier",
        "name": "StackingClassifier",
        "params": {
            "estimators": null,
            "final_estimator": "None",
            "cv": "None",
            "stack_method": "'auto'",
            "n_jobs": "None",
            "passthrough": "False",
            "verbose": "0"
        }
    },
    {
        "full_name": "sklearn.ensemble.StackingRegressor",
        "name": "StackingRegressor",
        "params": {
            "estimators": null,
            "final_estimator": "None",
            "cv": "None",
            "n_jobs": "None",
            "passthrough": "False",
            "verbose": "0"
        }
    },
    {
        "full_name": "sklearn.ensemble.VotingClassifier",
        "name": "VotingClassifier",
        "params": {
            "estimators": null,
            "voting": "'hard'",
            "weights": "None",
            "n_jobs": "None",
            "flatten_transform": "True",
            "verbose": "False"
        }
    },
    {
        "full_name": "sklearn.ensemble.VotingRegressor",
        "name": "VotingRegressor",
        "params": {
            "estimators": null,
            "weights": "None",
            "n_jobs": "None",
            "verbose": "False"
        }
    },
    {
        "full_name": "sklearn.ensemble.HistGradientBoostingRegressor",
        "name": "HistGradientBoostingRegressor",
        "params": {
            "loss": "'squared_error'",
            "quantile": "None",
            "learning_rate": "0.1",
            "max_iter": "100",
            "max_leaf_nodes": "31",
            "max_depth": "None",
            "min_samples_leaf": "20",
            "l2_regularization": "0.0",
            "max_bins": "255",
            "categorical_features": "None",
            "monotonic_cst": "None",
            "warm_start": "False",
            "early_stopping": "'auto'",
            "scoring": "'loss'",
            "validation_fraction": "0.1",
            "n_iter_no_change": "10",
            "tol": "1e-07",
            "verbose": "0",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.ensemble.HistGradientBoostingClassifier",
        "name": "HistGradientBoostingClassifier",
        "params": {
            "loss": "'log_loss'",
            "learning_rate": "0.1",
            "max_iter": "100",
            "max_leaf_nodes": "31",
            "max_depth": "None",
            "min_samples_leaf": "20",
            "l2_regularization": "0.0",
            "max_bins": "255",
            "categorical_features": "None",
            "monotonic_cst": "None",
            "warm_start": "False",
            "early_stopping": "'auto'",
            "scoring": "'loss'",
            "validation_fraction": "0.1",
            "n_iter_no_change": "10",
            "tol": "1e-07",
            "verbose": "0",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.exceptions.ConvergenceWarning",
        "name": "ConvergenceWarning",
        "params": {}
    },
    {
        "full_name": "sklearn.exceptions.DataConversionWarning",
        "name": "DataConversionWarning",
        "params": {}
    },
    {
        "full_name": "sklearn.exceptions.DataDimensionalityWarning",
        "name": "DataDimensionalityWarning",
        "params": {}
    },
    {
        "full_name": "sklearn.exceptions.EfficiencyWarning",
        "name": "EfficiencyWarning",
        "params": {}
    },
    {
        "full_name": "sklearn.exceptions.FitFailedWarning",
        "name": "FitFailedWarning",
        "params": {}
    },
    {
        "full_name": "sklearn.exceptions.NotFittedError",
        "name": "NotFittedError",
        "params": {}
    },
    {
        "full_name": "sklearn.exceptions.UndefinedMetricWarning",
        "name": "UndefinedMetricWarning",
        "params": {}
    },
    {
        "full_name": "sklearn.feature_extraction.DictVectorizer",
        "name": "DictVectorizer",
        "params": {
            "dtype": "<class 'numpy.float64'>",
            "separator": "'='",
            "sparse": "True",
            "sort": "True"
        }
    },
    {
        "full_name": "sklearn.feature_extraction.FeatureHasher",
        "name": "FeatureHasher",
        "params": {
            "n_features": "1048576",
            "input_type": "'dict'",
            "dtype": "<class 'numpy.float64'>",
            "alternate_sign": "True"
        }
    },
    {
        "full_name": "sklearn.feature_extraction.image.extract_patches_2d",
        "name": "extract_patches_2d",
        "params": {
            "image": null,
            "patch_size": null,
            "max_patches": "None",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.feature_extraction.image.grid_to_graph",
        "name": "grid_to_graph",
        "params": {
            "n_x": null,
            "n_y": null,
            "n_z": "1",
            "mask": "None",
            "return_as": "<class 'scipy.sparse._coo.coo_matrix'>",
            "dtype": "<class 'int'>"
        }
    },
    {
        "full_name": "sklearn.feature_extraction.image.img_to_graph",
        "name": "img_to_graph",
        "params": {
            "img": null,
            "mask": "None",
            "return_as": "<class 'scipy.sparse._coo.coo_matrix'>",
            "dtype": "None"
        }
    },
    {
        "full_name": "sklearn.feature_extraction.image.reconstruct_from_patches_2d",
        "name": "reconstruct_from_patches_2d",
        "params": {
            "patches": null,
            "image_size": null
        }
    },
    {
        "full_name": "sklearn.feature_extraction.image.PatchExtractor",
        "name": "PatchExtractor",
        "params": {
            "patch_size": "None",
            "max_patches": "None",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.feature_extraction.text.CountVectorizer",
        "name": "CountVectorizer",
        "params": {
            "input": "'content'",
            "encoding": "'utf-8'",
            "decode_error": "'strict'",
            "strip_accents": "None",
            "lowercase": "True",
            "preprocessor": "None",
            "tokenizer": "None",
            "stop_words": "None",
            "token_pattern": "'(?u)\\\\b\\\\w\\\\w+\\\\b'",
            "ngram_range": "(1, 1)",
            "analyzer": "'word'",
            "max_df": "1.0",
            "min_df": "1",
            "max_features": "None",
            "vocabulary": "None",
            "binary": "False",
            "dtype": "<class 'numpy.int64'>"
        }
    },
    {
        "full_name": "sklearn.feature_extraction.text.HashingVectorizer",
        "name": "HashingVectorizer",
        "params": {
            "input": "'content'",
            "encoding": "'utf-8'",
            "decode_error": "'strict'",
            "strip_accents": "None",
            "lowercase": "True",
            "preprocessor": "None",
            "tokenizer": "None",
            "stop_words": "None",
            "token_pattern": "'(?u)\\\\b\\\\w\\\\w+\\\\b'",
            "ngram_range": "(1, 1)",
            "analyzer": "'word'",
            "n_features": "1048576",
            "binary": "False",
            "norm": "'l2'",
            "alternate_sign": "True",
            "dtype": "<class 'numpy.float64'>"
        }
    },
    {
        "full_name": "sklearn.feature_extraction.text.TfidfTransformer",
        "name": "TfidfTransformer",
        "params": {
            "norm": "'l2'",
            "use_idf": "True",
            "smooth_idf": "True",
            "sublinear_tf": "False"
        }
    },
    {
        "full_name": "sklearn.feature_extraction.text.TfidfVectorizer",
        "name": "TfidfVectorizer",
        "params": {
            "input": "'content'",
            "encoding": "'utf-8'",
            "decode_error": "'strict'",
            "strip_accents": "None",
            "lowercase": "True",
            "preprocessor": "None",
            "tokenizer": "None",
            "analyzer": "'word'",
            "stop_words": "None",
            "token_pattern": "'(?u)\\\\b\\\\w\\\\w+\\\\b'",
            "ngram_range": "(1, 1)",
            "max_df": "1.0",
            "min_df": "1",
            "max_features": "None",
            "vocabulary": "None",
            "binary": "False",
            "dtype": "<class 'numpy.float64'>",
            "norm": "'l2'",
            "use_idf": "True",
            "smooth_idf": "True",
            "sublinear_tf": "False"
        }
    },
    {
        "full_name": "sklearn.feature_selection.GenericUnivariateSelect",
        "name": "GenericUnivariateSelect",
        "params": {
            "score_func": "<function f_classif>",
            "mode": "'percentile'",
            "param": "1e-05"
        }
    },
    {
        "full_name": "sklearn.feature_selection.SelectPercentile",
        "name": "SelectPercentile",
        "params": {
            "score_func": "<function f_classif>",
            "percentile": "10"
        }
    },
    {
        "full_name": "sklearn.feature_selection.SelectKBest",
        "name": "SelectKBest",
        "params": {
            "score_func": "<function f_classif>",
            "k": "10"
        }
    },
    {
        "full_name": "sklearn.feature_selection.SelectFpr",
        "name": "SelectFpr",
        "params": {
            "score_func": "<function f_classif>",
            "alpha": "0.05"
        }
    },
    {
        "full_name": "sklearn.feature_selection.SelectFdr",
        "name": "SelectFdr",
        "params": {
            "score_func": "<function f_classif>",
            "alpha": "0.05"
        }
    },
    {
        "full_name": "sklearn.feature_selection.SelectFromModel",
        "name": "SelectFromModel",
        "params": {
            "estimator": null,
            "threshold": "None",
            "prefit": "False",
            "norm_order": "1",
            "max_features": "None",
            "importance_getter": "'auto'"
        }
    },
    {
        "full_name": "sklearn.feature_selection.SelectFwe",
        "name": "SelectFwe",
        "params": {
            "score_func": "<function f_classif>",
            "alpha": "0.05"
        }
    },
    {
        "full_name": "sklearn.feature_selection.SequentialFeatureSelector",
        "name": "SequentialFeatureSelector",
        "params": {
            "estimator": null,
            "n_features_to_select": "'warn'",
            "tol": "None",
            "direction": "'forward'",
            "scoring": "None",
            "cv": "5",
            "n_jobs": "None"
        }
    },
    {
        "full_name": "sklearn.feature_selection.RFE",
        "name": "RFE",
        "params": {
            "estimator": null,
            "n_features_to_select": "None",
            "step": "1",
            "verbose": "0",
            "importance_getter": "'auto'"
        }
    },
    {
        "full_name": "sklearn.feature_selection.RFECV",
        "name": "RFECV",
        "params": {
            "estimator": null,
            "step": "1",
            "min_features_to_select": "1",
            "cv": "None",
            "scoring": "None",
            "verbose": "0",
            "n_jobs": "None",
            "importance_getter": "'auto'"
        }
    },
    {
        "full_name": "sklearn.feature_selection.VarianceThreshold",
        "name": "VarianceThreshold",
        "params": {
            "threshold": "0.0"
        }
    },
    {
        "full_name": "sklearn.feature_selection.chi2",
        "name": "chi2",
        "params": {
            "X": null,
            "y": null
        }
    },
    {
        "full_name": "sklearn.feature_selection.f_classif",
        "name": "f_classif",
        "params": {
            "X": null,
            "y": null
        }
    },
    {
        "full_name": "sklearn.feature_selection.f_regression",
        "name": "f_regression",
        "params": {
            "X": null,
            "y": null,
            "center": "True",
            "force_finite": "True"
        }
    },
    {
        "full_name": "sklearn.feature_selection.r_regression",
        "name": "r_regression",
        "params": {
            "X": null,
            "y": null,
            "center": "True",
            "force_finite": "True"
        }
    },
    {
        "full_name": "sklearn.feature_selection.mutual_info_classif",
        "name": "mutual_info_classif",
        "params": {
            "X": null,
            "y": null,
            "discrete_features": "'auto'",
            "n_neighbors": "3",
            "copy": "True",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.feature_selection.mutual_info_regression",
        "name": "mutual_info_regression",
        "params": {
            "X": null,
            "y": null,
            "discrete_features": "'auto'",
            "n_neighbors": "3",
            "copy": "True",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.gaussian_process.GaussianProcessClassifier",
        "name": "GaussianProcessClassifier",
        "params": {
            "kernel": "None",
            "optimizer": "'fmin_l_bfgs_b'",
            "n_restarts_optimizer": "0",
            "max_iter_predict": "100",
            "warm_start": "False",
            "copy_X_train": "True",
            "random_state": "None",
            "multi_class": "'one_vs_rest'",
            "n_jobs": "None"
        }
    },
    {
        "full_name": "sklearn.gaussian_process.GaussianProcessRegressor",
        "name": "GaussianProcessRegressor",
        "params": {
            "kernel": "None",
            "alpha": "1e-10",
            "optimizer": "'fmin_l_bfgs_b'",
            "n_restarts_optimizer": "0",
            "normalize_y": "False",
            "copy_X_train": "True",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.gaussian_process.kernels.CompoundKernel",
        "name": "CompoundKernel",
        "params": {
            "kernels": null
        }
    },
    {
        "full_name": "sklearn.gaussian_process.kernels.ConstantKernel",
        "name": "ConstantKernel",
        "params": {
            "constant_value": "1.0",
            "constant_value_bounds": "(1e-05, 100000.0)"
        }
    },
    {
        "full_name": "sklearn.gaussian_process.kernels.DotProduct",
        "name": "DotProduct",
        "params": {
            "sigma_0": "1.0",
            "sigma_0_bounds": "(1e-05, 100000.0)"
        }
    },
    {
        "full_name": "sklearn.gaussian_process.kernels.ExpSineSquared",
        "name": "ExpSineSquared",
        "params": {
            "length_scale": "1.0",
            "periodicity": "1.0",
            "length_scale_bounds": "(1e-05, 100000.0)",
            "periodicity_bounds": "(1e-05, 100000.0)"
        }
    },
    {
        "full_name": "sklearn.gaussian_process.kernels.Exponentiation",
        "name": "Exponentiation",
        "params": {
            "kernel": null,
            "exponent": null
        }
    },
    {
        "full_name": "sklearn.gaussian_process.kernels.Hyperparameter",
        "name": "Hyperparameter",
        "params": {
            "name": null,
            "value_type": null,
            "bounds": null,
            "n_elements": "1",
            "fixed": "None"
        }
    },
    {
        "full_name": "sklearn.gaussian_process.kernels.Kernel",
        "name": "Kernel",
        "params": {}
    },
    {
        "full_name": "sklearn.gaussian_process.kernels.Matern",
        "name": "Matern",
        "params": {
            "length_scale": "1.0",
            "length_scale_bounds": "(1e-05, 100000.0)",
            "nu": "1.5"
        }
    },
    {
        "full_name": "sklearn.gaussian_process.kernels.PairwiseKernel",
        "name": "PairwiseKernel",
        "params": {
            "gamma": "1.0",
            "gamma_bounds": "(1e-05, 100000.0)",
            "metric": "'linear'",
            "pairwise_kernels_kwargs": "None"
        }
    },
    {
        "full_name": "sklearn.gaussian_process.kernels.Product",
        "name": "Product",
        "params": {
            "k1": null,
            "k2": null
        }
    },
    {
        "full_name": "sklearn.gaussian_process.kernels.RBF",
        "name": "RBF",
        "params": {
            "length_scale": "1.0",
            "length_scale_bounds": "(1e-05, 100000.0)"
        }
    },
    {
        "full_name": "sklearn.gaussian_process.kernels.RationalQuadratic",
        "name": "RationalQuadratic",
        "params": {
            "length_scale": "1.0",
            "alpha": "1.0",
            "length_scale_bounds": "(1e-05, 100000.0)",
            "alpha_bounds": "(1e-05, 100000.0)"
        }
    },
    {
        "full_name": "sklearn.gaussian_process.kernels.Sum",
        "name": "Sum",
        "params": {
            "k1": null,
            "k2": null
        }
    },
    {
        "full_name": "sklearn.gaussian_process.kernels.WhiteKernel",
        "name": "WhiteKernel",
        "params": {
            "noise_level": "1.0",
            "noise_level_bounds": "(1e-05, 100000.0)"
        }
    },
    {
        "full_name": "sklearn.impute.SimpleImputer",
        "name": "SimpleImputer",
        "params": {
            "missing_values": "nan",
            "strategy": "'mean'",
            "fill_value": "None",
            "verbose": "'deprecated'",
            "copy": "True",
            "add_indicator": "False"
        }
    },
    {
        "full_name": "sklearn.impute.IterativeImputer",
        "name": "IterativeImputer",
        "params": {
            "estimator": "None",
            "missing_values": "nan",
            "sample_posterior": "False",
            "max_iter": "10",
            "tol": "0.001",
            "n_nearest_features": "None",
            "initial_strategy": "'mean'",
            "imputation_order": "'ascending'",
            "skip_complete": "False",
            "min_value": "- inf",
            "max_value": "inf",
            "verbose": "0",
            "random_state": "None",
            "add_indicator": "False"
        }
    },
    {
        "full_name": "sklearn.impute.MissingIndicator",
        "name": "MissingIndicator",
        "params": {
            "missing_values": "nan",
            "features": "'missing-only'",
            "sparse": "'auto'",
            "error_on_new": "True"
        }
    },
    {
        "full_name": "sklearn.impute.KNNImputer",
        "name": "KNNImputer",
        "params": {
            "missing_values": "nan",
            "n_neighbors": "5",
            "weights": "'uniform'",
            "metric": "'nan_euclidean'",
            "copy": "True",
            "add_indicator": "False"
        }
    },
    {
        "full_name": "sklearn.inspection.partial_dependence",
        "name": "partial_dependence",
        "params": {
            "estimator": null,
            "X": null,
            "features": null,
            "response_method": "'auto'",
            "percentiles": "(0.05, 0.95)",
            "grid_resolution": "100",
            "method": "'auto'",
            "kind": "'average'"
        }
    },
    {
        "full_name": "sklearn.inspection.permutation_importance",
        "name": "permutation_importance",
        "params": {
            "estimator": null,
            "X": null,
            "y": null,
            "scoring": "None",
            "n_repeats": "5",
            "n_jobs": "None",
            "random_state": "None",
            "sample_weight": "None",
            "max_samples": "1.0"
        }
    },
    {
        "full_name": "sklearn.inspection.DecisionBoundaryDisplay",
        "name": "DecisionBoundaryDisplay",
        "params": {
            "xx0": null,
            "xx1": null,
            "response": null,
            "xlabel": "None",
            "ylabel": "None"
        }
    },
    {
        "full_name": "sklearn.inspection.PartialDependenceDisplay",
        "name": "PartialDependenceDisplay",
        "params": {
            "pd_results": null,
            "features": null,
            "feature_names": null,
            "target_idx": null,
            "deciles": null,
            "pdp_lim": "'deprecated'",
            "kind": "'average'",
            "subsample": "1000",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.inspection.plot_partial_dependence",
        "name": "plot_partial_dependence",
        "params": {
            "estimator": null,
            "X": null,
            "features": null,
            "feature_names": "None",
            "target": "None",
            "response_method": "'auto'",
            "n_cols": "3",
            "grid_resolution": "100",
            "percentiles": "(0.05, 0.95)",
            "method": "'auto'",
            "n_jobs": "None",
            "verbose": "0",
            "line_kw": "None",
            "ice_lines_kw": "None",
            "pd_line_kw": "None",
            "contour_kw": "None",
            "ax": "None",
            "kind": "'average'",
            "subsample": "1000",
            "random_state": "None",
            "centered": "False"
        }
    },
    {
        "full_name": "sklearn.isotonic.IsotonicRegression",
        "name": "IsotonicRegression",
        "params": {
            "y_min": "None",
            "y_max": "None",
            "increasing": "True",
            "out_of_bounds": "'nan'"
        }
    },
    {
        "full_name": "sklearn.isotonic.check_increasing",
        "name": "check_increasing",
        "params": {
            "x": null,
            "y": null
        }
    },
    {
        "full_name": "sklearn.isotonic.isotonic_regression",
        "name": "isotonic_regression",
        "params": {
            "y": null,
            "sample_weight": "None",
            "y_min": "None",
            "y_max": "None",
            "increasing": "True"
        }
    },
    {
        "full_name": "sklearn.kernel_approximation.AdditiveChi2Sampler",
        "name": "AdditiveChi2Sampler",
        "params": {
            "sample_steps": "2",
            "sample_interval": "None"
        }
    },
    {
        "full_name": "sklearn.kernel_approximation.Nystroem",
        "name": "Nystroem",
        "params": {
            "kernel": "'rbf'",
            "gamma": "None",
            "coef0": "None",
            "degree": "None",
            "kernel_params": "None",
            "n_components": "100",
            "random_state": "None",
            "n_jobs": "None"
        }
    },
    {
        "full_name": "sklearn.kernel_approximation.PolynomialCountSketch",
        "name": "PolynomialCountSketch",
        "params": {
            "gamma": "1.0",
            "degree": "2",
            "coef0": "0",
            "n_components": "100",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.kernel_approximation.RBFSampler",
        "name": "RBFSampler",
        "params": {
            "gamma": "1.0",
            "n_components": "100",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.kernel_approximation.SkewedChi2Sampler",
        "name": "SkewedChi2Sampler",
        "params": {
            "skewedness": "1.0",
            "n_components": "100",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.kernel_ridge.KernelRidge",
        "name": "KernelRidge",
        "params": {
            "alpha": "1",
            "kernel": "'linear'",
            "gamma": "None",
            "degree": "3",
            "coef0": "1",
            "kernel_params": "None"
        }
    },
    {
        "full_name": "sklearn.linear_model.LogisticRegression",
        "name": "LogisticRegression",
        "params": {
            "penalty": "'l2'",
            "dual": "False",
            "tol": "0.0001",
            "C": "1.0",
            "fit_intercept": "True",
            "intercept_scaling": "1",
            "class_weight": "None",
            "random_state": "None",
            "solver": "'lbfgs'",
            "max_iter": "100",
            "multi_class": "'auto'",
            "verbose": "0",
            "warm_start": "False",
            "n_jobs": "None",
            "l1_ratio": "None"
        }
    },
    {
        "full_name": "sklearn.linear_model.LogisticRegressionCV",
        "name": "LogisticRegressionCV",
        "params": {
            "Cs": "10",
            "fit_intercept": "True",
            "cv": "None",
            "dual": "False",
            "penalty": "'l2'",
            "scoring": "None",
            "solver": "'lbfgs'",
            "tol": "0.0001",
            "max_iter": "100",
            "class_weight": "None",
            "n_jobs": "None",
            "verbose": "0",
            "refit": "True",
            "intercept_scaling": "1.0",
            "multi_class": "'auto'",
            "random_state": "None",
            "l1_ratios": "None"
        }
    },
    {
        "full_name": "sklearn.linear_model.PassiveAggressiveClassifier",
        "name": "PassiveAggressiveClassifier",
        "params": {
            "C": "1.0",
            "fit_intercept": "True",
            "max_iter": "1000",
            "tol": "0.001",
            "early_stopping": "False",
            "validation_fraction": "0.1",
            "n_iter_no_change": "5",
            "shuffle": "True",
            "verbose": "0",
            "loss": "'hinge'",
            "n_jobs": "None",
            "random_state": "None",
            "warm_start": "False",
            "class_weight": "None",
            "average": "False"
        }
    },
    {
        "full_name": "sklearn.linear_model.Perceptron",
        "name": "Perceptron",
        "params": {
            "penalty": "None",
            "alpha": "0.0001",
            "l1_ratio": "0.15",
            "fit_intercept": "True",
            "max_iter": "1000",
            "tol": "0.001",
            "shuffle": "True",
            "verbose": "0",
            "eta0": "1.0",
            "n_jobs": "None",
            "random_state": "0",
            "early_stopping": "False",
            "validation_fraction": "0.1",
            "n_iter_no_change": "5",
            "class_weight": "None",
            "warm_start": "False"
        }
    },
    {
        "full_name": "sklearn.linear_model.RidgeClassifier",
        "name": "RidgeClassifier",
        "params": {
            "alpha": "1.0",
            "fit_intercept": "True",
            "normalize": "'deprecated'",
            "copy_X": "True",
            "max_iter": "None",
            "tol": "0.001",
            "class_weight": "None",
            "solver": "'auto'",
            "positive": "False",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.linear_model.RidgeClassifierCV",
        "name": "RidgeClassifierCV",
        "params": {
            "alphas": "(0.1, 1.0, 10.0)",
            "fit_intercept": "True",
            "normalize": "'deprecated'",
            "scoring": "None",
            "cv": "None",
            "class_weight": "None",
            "store_cv_values": "False"
        }
    },
    {
        "full_name": "sklearn.linear_model.SGDClassifier",
        "name": "SGDClassifier",
        "params": {
            "loss": "'hinge'",
            "penalty": "'l2'",
            "alpha": "0.0001",
            "l1_ratio": "0.15",
            "fit_intercept": "True",
            "max_iter": "1000",
            "tol": "0.001",
            "shuffle": "True",
            "verbose": "0",
            "epsilon": "0.1",
            "n_jobs": "None",
            "random_state": "None",
            "learning_rate": "'optimal'",
            "eta0": "0.0",
            "power_t": "0.5",
            "early_stopping": "False",
            "validation_fraction": "0.1",
            "n_iter_no_change": "5",
            "class_weight": "None",
            "warm_start": "False",
            "average": "False"
        }
    },
    {
        "full_name": "sklearn.linear_model.SGDOneClassSVM",
        "name": "SGDOneClassSVM",
        "params": {
            "nu": "0.5",
            "fit_intercept": "True",
            "max_iter": "1000",
            "tol": "0.001",
            "shuffle": "True",
            "verbose": "0",
            "random_state": "None",
            "learning_rate": "'optimal'",
            "eta0": "0.0",
            "power_t": "0.5",
            "warm_start": "False",
            "average": "False"
        }
    },
    {
        "full_name": "sklearn.linear_model.LinearRegression",
        "name": "LinearRegression",
        "params": {
            "fit_intercept": "True",
            "normalize": "'deprecated'",
            "copy_X": "True",
            "n_jobs": "None",
            "positive": "False"
        }
    },
    {
        "full_name": "sklearn.linear_model.Ridge",
        "name": "Ridge",
        "params": {
            "alpha": "1.0",
            "fit_intercept": "True",
            "normalize": "'deprecated'",
            "copy_X": "True",
            "max_iter": "None",
            "tol": "0.001",
            "solver": "'auto'",
            "positive": "False",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.linear_model.RidgeCV",
        "name": "RidgeCV",
        "params": {
            "alphas": "(0.1, 1.0, 10.0)",
            "fit_intercept": "True",
            "normalize": "'deprecated'",
            "scoring": "None",
            "cv": "None",
            "gcv_mode": "None",
            "store_cv_values": "False",
            "alpha_per_target": "False"
        }
    },
    {
        "full_name": "sklearn.linear_model.SGDRegressor",
        "name": "SGDRegressor",
        "params": {
            "loss": "'squared_error'",
            "penalty": "'l2'",
            "alpha": "0.0001",
            "l1_ratio": "0.15",
            "fit_intercept": "True",
            "max_iter": "1000",
            "tol": "0.001",
            "shuffle": "True",
            "verbose": "0",
            "epsilon": "0.1",
            "random_state": "None",
            "learning_rate": "'invscaling'",
            "eta0": "0.01",
            "power_t": "0.25",
            "early_stopping": "False",
            "validation_fraction": "0.1",
            "n_iter_no_change": "5",
            "warm_start": "False",
            "average": "False"
        }
    },
    {
        "full_name": "sklearn.linear_model.ElasticNet",
        "name": "ElasticNet",
        "params": {
            "alpha": "1.0",
            "l1_ratio": "0.5",
            "fit_intercept": "True",
            "normalize": "'deprecated'",
            "precompute": "False",
            "max_iter": "1000",
            "copy_X": "True",
            "tol": "0.0001",
            "warm_start": "False",
            "positive": "False",
            "random_state": "None",
            "selection": "'cyclic'"
        }
    },
    {
        "full_name": "sklearn.linear_model.ElasticNetCV",
        "name": "ElasticNetCV",
        "params": {
            "l1_ratio": "0.5",
            "eps": "0.001",
            "n_alphas": "100",
            "alphas": "None",
            "fit_intercept": "True",
            "normalize": "'deprecated'",
            "precompute": "'auto'",
            "max_iter": "1000",
            "tol": "0.0001",
            "cv": "None",
            "copy_X": "True",
            "verbose": "0",
            "n_jobs": "None",
            "positive": "False",
            "random_state": "None",
            "selection": "'cyclic'"
        }
    },
    {
        "full_name": "sklearn.linear_model.Lars",
        "name": "Lars",
        "params": {
            "fit_intercept": "True",
            "verbose": "False",
            "normalize": "'deprecated'",
            "precompute": "'auto'",
            "n_nonzero_coefs": "500",
            "eps": "2.220446049250313e-16",
            "copy_X": "True",
            "fit_path": "True",
            "jitter": "None",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.linear_model.LarsCV",
        "name": "LarsCV",
        "params": {
            "fit_intercept": "True",
            "verbose": "False",
            "max_iter": "500",
            "normalize": "'deprecated'",
            "precompute": "'auto'",
            "cv": "None",
            "max_n_alphas": "1000",
            "n_jobs": "None",
            "eps": "2.220446049250313e-16",
            "copy_X": "True"
        }
    },
    {
        "full_name": "sklearn.linear_model.Lasso",
        "name": "Lasso",
        "params": {
            "alpha": "1.0",
            "fit_intercept": "True",
            "normalize": "'deprecated'",
            "precompute": "False",
            "copy_X": "True",
            "max_iter": "1000",
            "tol": "0.0001",
            "warm_start": "False",
            "positive": "False",
            "random_state": "None",
            "selection": "'cyclic'"
        }
    },
    {
        "full_name": "sklearn.linear_model.LassoCV",
        "name": "LassoCV",
        "params": {
            "eps": "0.001",
            "n_alphas": "100",
            "alphas": "None",
            "fit_intercept": "True",
            "normalize": "'deprecated'",
            "precompute": "'auto'",
            "max_iter": "1000",
            "tol": "0.0001",
            "copy_X": "True",
            "cv": "None",
            "verbose": "False",
            "n_jobs": "None",
            "positive": "False",
            "random_state": "None",
            "selection": "'cyclic'"
        }
    },
    {
        "full_name": "sklearn.linear_model.LassoLars",
        "name": "LassoLars",
        "params": {
            "alpha": "1.0",
            "fit_intercept": "True",
            "verbose": "False",
            "normalize": "'deprecated'",
            "precompute": "'auto'",
            "max_iter": "500",
            "eps": "2.220446049250313e-16",
            "copy_X": "True",
            "fit_path": "True",
            "positive": "False",
            "jitter": "None",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.linear_model.LassoLarsCV",
        "name": "LassoLarsCV",
        "params": {
            "fit_intercept": "True",
            "verbose": "False",
            "max_iter": "500",
            "normalize": "'deprecated'",
            "precompute": "'auto'",
            "cv": "None",
            "max_n_alphas": "1000",
            "n_jobs": "None",
            "eps": "2.220446049250313e-16",
            "copy_X": "True",
            "positive": "False"
        }
    },
    {
        "full_name": "sklearn.linear_model.LassoLarsIC",
        "name": "LassoLarsIC",
        "params": {
            "criterion": "'aic'",
            "fit_intercept": "True",
            "verbose": "False",
            "normalize": "'deprecated'",
            "precompute": "'auto'",
            "max_iter": "500",
            "eps": "2.220446049250313e-16",
            "copy_X": "True",
            "positive": "False",
            "noise_variance": "None"
        }
    },
    {
        "full_name": "sklearn.linear_model.OrthogonalMatchingPursuit",
        "name": "OrthogonalMatchingPursuit",
        "params": {
            "n_nonzero_coefs": "None",
            "tol": "None",
            "fit_intercept": "True",
            "normalize": "'deprecated'",
            "precompute": "'auto'"
        }
    },
    {
        "full_name": "sklearn.linear_model.OrthogonalMatchingPursuitCV",
        "name": "OrthogonalMatchingPursuitCV",
        "params": {
            "copy": "True",
            "fit_intercept": "True",
            "normalize": "'deprecated'",
            "max_iter": "None",
            "cv": "None",
            "n_jobs": "None",
            "verbose": "False"
        }
    },
    {
        "full_name": "sklearn.linear_model.ARDRegression",
        "name": "ARDRegression",
        "params": {
            "n_iter": "300",
            "tol": "0.001",
            "alpha_1": "1e-06",
            "alpha_2": "1e-06",
            "lambda_1": "1e-06",
            "lambda_2": "1e-06",
            "compute_score": "False",
            "threshold_lambda": "10000.0",
            "fit_intercept": "True",
            "normalize": "'deprecated'",
            "copy_X": "True",
            "verbose": "False"
        }
    },
    {
        "full_name": "sklearn.linear_model.BayesianRidge",
        "name": "BayesianRidge",
        "params": {
            "n_iter": "300",
            "tol": "0.001",
            "alpha_1": "1e-06",
            "alpha_2": "1e-06",
            "lambda_1": "1e-06",
            "lambda_2": "1e-06",
            "alpha_init": "None",
            "lambda_init": "None",
            "compute_score": "False",
            "fit_intercept": "True",
            "normalize": "'deprecated'",
            "copy_X": "True",
            "verbose": "False"
        }
    },
    {
        "full_name": "sklearn.linear_model.MultiTaskElasticNet",
        "name": "MultiTaskElasticNet",
        "params": {
            "alpha": "1.0",
            "l1_ratio": "0.5",
            "fit_intercept": "True",
            "normalize": "'deprecated'",
            "copy_X": "True",
            "max_iter": "1000",
            "tol": "0.0001",
            "warm_start": "False",
            "random_state": "None",
            "selection": "'cyclic'"
        }
    },
    {
        "full_name": "sklearn.linear_model.MultiTaskElasticNetCV",
        "name": "MultiTaskElasticNetCV",
        "params": {
            "l1_ratio": "0.5",
            "eps": "0.001",
            "n_alphas": "100",
            "alphas": "None",
            "fit_intercept": "True",
            "normalize": "'deprecated'",
            "max_iter": "1000",
            "tol": "0.0001",
            "cv": "None",
            "copy_X": "True",
            "verbose": "0",
            "n_jobs": "None",
            "random_state": "None",
            "selection": "'cyclic'"
        }
    },
    {
        "full_name": "sklearn.linear_model.MultiTaskLasso",
        "name": "MultiTaskLasso",
        "params": {
            "alpha": "1.0",
            "fit_intercept": "True",
            "normalize": "'deprecated'",
            "copy_X": "True",
            "max_iter": "1000",
            "tol": "0.0001",
            "warm_start": "False",
            "random_state": "None",
            "selection": "'cyclic'"
        }
    },
    {
        "full_name": "sklearn.linear_model.MultiTaskLassoCV",
        "name": "MultiTaskLassoCV",
        "params": {
            "eps": "0.001",
            "n_alphas": "100",
            "alphas": "None",
            "fit_intercept": "True",
            "normalize": "'deprecated'",
            "max_iter": "1000",
            "tol": "0.0001",
            "copy_X": "True",
            "cv": "None",
            "verbose": "False",
            "n_jobs": "None",
            "random_state": "None",
            "selection": "'cyclic'"
        }
    },
    {
        "full_name": "sklearn.linear_model.HuberRegressor",
        "name": "HuberRegressor",
        "params": {
            "epsilon": "1.35",
            "max_iter": "100",
            "alpha": "0.0001",
            "warm_start": "False",
            "fit_intercept": "True",
            "tol": "1e-05"
        }
    },
    {
        "full_name": "sklearn.linear_model.QuantileRegressor",
        "name": "QuantileRegressor",
        "params": {
            "quantile": "0.5",
            "alpha": "1.0",
            "fit_intercept": "True",
            "solver": "'interior-point'",
            "solver_options": "None"
        }
    },
    {
        "full_name": "sklearn.linear_model.RANSACRegressor",
        "name": "RANSACRegressor",
        "params": {
            "estimator": "None",
            "min_samples": "None",
            "residual_threshold": "None",
            "is_data_valid": "None",
            "is_model_valid": "None",
            "max_trials": "100",
            "max_skips": "inf",
            "stop_n_inliers": "inf",
            "stop_score": "inf",
            "stop_probability": "0.99",
            "loss": "'absolute_error'",
            "random_state": "None",
            "base_estimator": "'deprecated'"
        }
    },
    {
        "full_name": "sklearn.linear_model.TheilSenRegressor",
        "name": "TheilSenRegressor",
        "params": {
            "fit_intercept": "True",
            "copy_X": "True",
            "max_subpopulation": "10000.0",
            "n_subsamples": "None",
            "max_iter": "300",
            "tol": "0.001",
            "random_state": "None",
            "n_jobs": "None",
            "verbose": "False"
        }
    },
    {
        "full_name": "sklearn.linear_model.PoissonRegressor",
        "name": "PoissonRegressor",
        "params": {
            "alpha": "1.0",
            "fit_intercept": "True",
            "max_iter": "100",
            "tol": "0.0001",
            "warm_start": "False",
            "verbose": "0"
        }
    },
    {
        "full_name": "sklearn.linear_model.TweedieRegressor",
        "name": "TweedieRegressor",
        "params": {
            "power": "0.0",
            "alpha": "1.0",
            "fit_intercept": "True",
            "link": "'auto'",
            "max_iter": "100",
            "tol": "0.0001",
            "warm_start": "False",
            "verbose": "0"
        }
    },
    {
        "full_name": "sklearn.linear_model.GammaRegressor",
        "name": "GammaRegressor",
        "params": {
            "alpha": "1.0",
            "fit_intercept": "True",
            "max_iter": "100",
            "tol": "0.0001",
            "warm_start": "False",
            "verbose": "0"
        }
    },
    {
        "full_name": "sklearn.linear_model.PassiveAggressiveRegressor",
        "name": "PassiveAggressiveRegressor",
        "params": {
            "C": "1.0",
            "fit_intercept": "True",
            "max_iter": "1000",
            "tol": "0.001",
            "early_stopping": "False",
            "validation_fraction": "0.1",
            "n_iter_no_change": "5",
            "shuffle": "True",
            "verbose": "0",
            "loss": "'epsilon_insensitive'",
            "epsilon": "0.1",
            "random_state": "None",
            "warm_start": "False",
            "average": "False"
        }
    },
    {
        "full_name": "sklearn.linear_model.enet_path",
        "name": "enet_path",
        "params": {
            "X": null,
            "y": null,
            "l1_ratio": "0.5",
            "eps": "0.001",
            "n_alphas": "100",
            "alphas": "None",
            "precompute": "'auto'",
            "Xy": "None",
            "copy_X": "True",
            "coef_init": "None",
            "verbose": "False",
            "return_n_iter": "False",
            "positive": "False",
            "check_input": "True",
            "**params": null
        }
    },
    {
        "full_name": "sklearn.linear_model.lars_path",
        "name": "lars_path",
        "params": {
            "X": null,
            "y": null,
            "Xy": "None",
            "Gram": "None",
            "max_iter": "500",
            "alpha_min": "0",
            "method": "'lar'",
            "copy_X": "True",
            "eps": "2.220446049250313e-16",
            "copy_Gram": "True",
            "verbose": "0",
            "return_path": "True",
            "return_n_iter": "False",
            "positive": "False"
        }
    },
    {
        "full_name": "sklearn.linear_model.lars_path_gram",
        "name": "lars_path_gram",
        "params": {
            "Xy": null,
            "Gram": null,
            "n_samples": null,
            "max_iter": "500",
            "alpha_min": "0",
            "method": "'lar'",
            "copy_X": "True",
            "eps": "2.220446049250313e-16",
            "copy_Gram": "True",
            "verbose": "0",
            "return_path": "True",
            "return_n_iter": "False",
            "positive": "False"
        }
    },
    {
        "full_name": "sklearn.linear_model.lasso_path",
        "name": "lasso_path",
        "params": {
            "X": null,
            "y": null,
            "eps": "0.001",
            "n_alphas": "100",
            "alphas": "None",
            "precompute": "'auto'",
            "Xy": "None",
            "copy_X": "True",
            "coef_init": "None",
            "verbose": "False",
            "return_n_iter": "False",
            "positive": "False",
            "**params": null
        }
    },
    {
        "full_name": "sklearn.linear_model.orthogonal_mp",
        "name": "orthogonal_mp",
        "params": {
            "X": null,
            "y": null,
            "n_nonzero_coefs": "None",
            "tol": "None",
            "precompute": "False",
            "copy_X": "True",
            "return_path": "False",
            "return_n_iter": "False"
        }
    },
    {
        "full_name": "sklearn.linear_model.orthogonal_mp_gram",
        "name": "orthogonal_mp_gram",
        "params": {
            "Gram": null,
            "Xy": null,
            "n_nonzero_coefs": "None",
            "tol": "None",
            "norms_squared": "None",
            "copy_Gram": "True",
            "copy_Xy": "True",
            "return_path": "False",
            "return_n_iter": "False"
        }
    },
    {
        "full_name": "sklearn.linear_model.ridge_regression",
        "name": "ridge_regression",
        "params": {
            "X": null,
            "y": null,
            "alpha": null,
            "sample_weight": "None",
            "solver": "'auto'",
            "max_iter": "None",
            "tol": "0.001",
            "verbose": "0",
            "positive": "False",
            "random_state": "None",
            "return_n_iter": "False",
            "return_intercept": "False",
            "check_input": "True"
        }
    },
    {
        "full_name": "sklearn.manifold.Isomap",
        "name": "Isomap",
        "params": {
            "n_neighbors": "5",
            "radius": "None",
            "n_components": "2",
            "eigen_solver": "'auto'",
            "tol": "0",
            "max_iter": "None",
            "path_method": "'auto'",
            "neighbors_algorithm": "'auto'",
            "n_jobs": "None",
            "metric": "'minkowski'",
            "p": "2",
            "metric_params": "None"
        }
    },
    {
        "full_name": "sklearn.manifold.LocallyLinearEmbedding",
        "name": "LocallyLinearEmbedding",
        "params": {
            "n_neighbors": "5",
            "n_components": "2",
            "reg": "0.001",
            "eigen_solver": "'auto'",
            "tol": "1e-06",
            "max_iter": "100",
            "method": "'standard'",
            "hessian_tol": "0.0001",
            "modified_tol": "1e-12",
            "neighbors_algorithm": "'auto'",
            "random_state": "None",
            "n_jobs": "None"
        }
    },
    {
        "full_name": "sklearn.manifold.MDS",
        "name": "MDS",
        "params": {
            "n_components": "2",
            "metric": "True",
            "n_init": "4",
            "max_iter": "300",
            "verbose": "0",
            "eps": "0.001",
            "n_jobs": "None",
            "random_state": "None",
            "dissimilarity": "'euclidean'"
        }
    },
    {
        "full_name": "sklearn.manifold.SpectralEmbedding",
        "name": "SpectralEmbedding",
        "params": {
            "n_components": "2",
            "affinity": "'nearest_neighbors'",
            "gamma": "None",
            "random_state": "None",
            "eigen_solver": "None",
            "n_neighbors": "None",
            "n_jobs": "None"
        }
    },
    {
        "full_name": "sklearn.manifold.TSNE",
        "name": "TSNE",
        "params": {
            "n_components": "2",
            "perplexity": "30.0",
            "early_exaggeration": "12.0",
            "learning_rate": "'warn'",
            "n_iter": "1000",
            "n_iter_without_progress": "300",
            "min_grad_norm": "1e-07",
            "metric": "'euclidean'",
            "metric_params": "None",
            "init": "'warn'",
            "verbose": "0",
            "random_state": "None",
            "method": "'barnes_hut'",
            "angle": "0.5",
            "n_jobs": "None",
            "square_distances": "'deprecated'"
        }
    },
    {
        "full_name": "sklearn.manifold.locally_linear_embedding",
        "name": "locally_linear_embedding",
        "params": {
            "X": null,
            "n_neighbors": null,
            "n_components": null,
            "reg": "0.001",
            "eigen_solver": "'auto'",
            "tol": "1e-06",
            "max_iter": "100",
            "method": "'standard'",
            "hessian_tol": "0.0001",
            "modified_tol": "1e-12",
            "random_state": "None",
            "n_jobs": "None"
        }
    },
    {
        "full_name": "sklearn.manifold.smacof",
        "name": "smacof",
        "params": {
            "dissimilarities": null,
            "metric": "True",
            "n_components": "2",
            "init": "None",
            "n_init": "8",
            "n_jobs": "None",
            "max_iter": "300",
            "verbose": "0",
            "eps": "0.001",
            "random_state": "None",
            "return_n_iter": "False"
        }
    },
    {
        "full_name": "sklearn.manifold.spectral_embedding",
        "name": "spectral_embedding",
        "params": {
            "adjacency": null,
            "n_components": "8",
            "eigen_solver": "None",
            "random_state": "None",
            "eigen_tol": "0.0",
            "norm_laplacian": "True",
            "drop_first": "True"
        }
    },
    {
        "full_name": "sklearn.manifold.trustworthiness",
        "name": "trustworthiness",
        "params": {
            "X": null,
            "X_embedded": null,
            "n_neighbors": "5",
            "metric": "'euclidean'"
        }
    },
    {
        "full_name": "sklearn.metrics.check_scoring",
        "name": "check_scoring",
        "params": {
            "estimator": null,
            "scoring": "None",
            "allow_none": "False"
        }
    },
    {
        "full_name": "sklearn.metrics.get_scorer",
        "name": "get_scorer",
        "params": {
            "scoring": null
        }
    },
    {
        "full_name": "sklearn.metrics.get_scorer_names",
        "name": "get_scorer_names",
        "params": {}
    },
    {
        "full_name": "sklearn.metrics.make_scorer",
        "name": "make_scorer",
        "params": {
            "score_func": null,
            "greater_is_better": "True",
            "needs_proba": "False",
            "needs_threshold": "False",
            "**kwargs": null
        }
    },
    {
        "full_name": "sklearn.metrics.accuracy_score",
        "name": "accuracy_score",
        "params": {
            "y_true": null,
            "y_pred": null,
            "normalize": "True",
            "sample_weight": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.auc",
        "name": "auc",
        "params": {
            "x": null,
            "y": null
        }
    },
    {
        "full_name": "sklearn.metrics.average_precision_score",
        "name": "average_precision_score",
        "params": {
            "y_true": null,
            "y_score": null,
            "average": "'macro'",
            "pos_label": "1",
            "sample_weight": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.balanced_accuracy_score",
        "name": "balanced_accuracy_score",
        "params": {
            "y_true": null,
            "y_pred": null,
            "sample_weight": "None",
            "adjusted": "False"
        }
    },
    {
        "full_name": "sklearn.metrics.brier_score_loss",
        "name": "brier_score_loss",
        "params": {
            "y_true": null,
            "y_prob": null,
            "sample_weight": "None",
            "pos_label": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.classification_report",
        "name": "classification_report",
        "params": {
            "y_true": null,
            "y_pred": null,
            "labels": "None",
            "target_names": "None",
            "sample_weight": "None",
            "digits": "2",
            "output_dict": "False",
            "zero_division": "'warn'"
        }
    },
    {
        "full_name": "sklearn.metrics.cohen_kappa_score",
        "name": "cohen_kappa_score",
        "params": {
            "y1": null,
            "y2": null,
            "labels": "None",
            "weights": "None",
            "sample_weight": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.confusion_matrix",
        "name": "confusion_matrix",
        "params": {
            "y_true": null,
            "y_pred": null,
            "labels": "None",
            "sample_weight": "None",
            "normalize": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.dcg_score",
        "name": "dcg_score",
        "params": {
            "y_true": null,
            "y_score": null,
            "k": "None",
            "log_base": "2",
            "sample_weight": "None",
            "ignore_ties": "False"
        }
    },
    {
        "full_name": "sklearn.metrics.det_curve",
        "name": "det_curve",
        "params": {
            "y_true": null,
            "y_score": null,
            "pos_label": "None",
            "sample_weight": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.f1_score",
        "name": "f1_score",
        "params": {
            "y_true": null,
            "y_pred": null,
            "labels": "None",
            "pos_label": "1",
            "average": "'binary'",
            "sample_weight": "None",
            "zero_division": "'warn'"
        }
    },
    {
        "full_name": "sklearn.metrics.fbeta_score",
        "name": "fbeta_score",
        "params": {
            "y_true": null,
            "y_pred": null,
            "beta": null,
            "labels": "None",
            "pos_label": "1",
            "average": "'binary'",
            "sample_weight": "None",
            "zero_division": "'warn'"
        }
    },
    {
        "full_name": "sklearn.metrics.hamming_loss",
        "name": "hamming_loss",
        "params": {
            "y_true": null,
            "y_pred": null,
            "sample_weight": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.hinge_loss",
        "name": "hinge_loss",
        "params": {
            "y_true": null,
            "pred_decision": null,
            "labels": "None",
            "sample_weight": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.jaccard_score",
        "name": "jaccard_score",
        "params": {
            "y_true": null,
            "y_pred": null,
            "labels": "None",
            "pos_label": "1",
            "average": "'binary'",
            "sample_weight": "None",
            "zero_division": "'warn'"
        }
    },
    {
        "full_name": "sklearn.metrics.log_loss",
        "name": "log_loss",
        "params": {
            "y_true": null,
            "y_pred": null,
            "eps": "1e-15",
            "normalize": "True",
            "sample_weight": "None",
            "labels": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.matthews_corrcoef",
        "name": "matthews_corrcoef",
        "params": {
            "y_true": null,
            "y_pred": null,
            "sample_weight": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.multilabel_confusion_matrix",
        "name": "multilabel_confusion_matrix",
        "params": {
            "y_true": null,
            "y_pred": null,
            "sample_weight": "None",
            "labels": "None",
            "samplewise": "False"
        }
    },
    {
        "full_name": "sklearn.metrics.ndcg_score",
        "name": "ndcg_score",
        "params": {
            "y_true": null,
            "y_score": null,
            "k": "None",
            "sample_weight": "None",
            "ignore_ties": "False"
        }
    },
    {
        "full_name": "sklearn.metrics.precision_recall_curve",
        "name": "precision_recall_curve",
        "params": {
            "y_true": null,
            "probas_pred": null,
            "pos_label": "None",
            "sample_weight": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.precision_recall_fscore_support",
        "name": "precision_recall_fscore_support",
        "params": {
            "y_true": null,
            "y_pred": null,
            "beta": "1.0",
            "labels": "None",
            "pos_label": "1",
            "average": "None",
            "warn_for": "('precision', 'recall', 'f-score')",
            "sample_weight": "None",
            "zero_division": "'warn'"
        }
    },
    {
        "full_name": "sklearn.metrics.precision_score",
        "name": "precision_score",
        "params": {
            "y_true": null,
            "y_pred": null,
            "labels": "None",
            "pos_label": "1",
            "average": "'binary'",
            "sample_weight": "None",
            "zero_division": "'warn'"
        }
    },
    {
        "full_name": "sklearn.metrics.recall_score",
        "name": "recall_score",
        "params": {
            "y_true": null,
            "y_pred": null,
            "labels": "None",
            "pos_label": "1",
            "average": "'binary'",
            "sample_weight": "None",
            "zero_division": "'warn'"
        }
    },
    {
        "full_name": "sklearn.metrics.roc_auc_score",
        "name": "roc_auc_score",
        "params": {
            "y_true": null,
            "y_score": null,
            "average": "'macro'",
            "sample_weight": "None",
            "max_fpr": "None",
            "multi_class": "'raise'",
            "labels": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.roc_curve",
        "name": "roc_curve",
        "params": {
            "y_true": null,
            "y_score": null,
            "pos_label": "None",
            "sample_weight": "None",
            "drop_intermediate": "True"
        }
    },
    {
        "full_name": "sklearn.metrics.top_k_accuracy_score",
        "name": "top_k_accuracy_score",
        "params": {
            "y_true": null,
            "y_score": null,
            "k": "2",
            "normalize": "True",
            "sample_weight": "None",
            "labels": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.zero_one_loss",
        "name": "zero_one_loss",
        "params": {
            "y_true": null,
            "y_pred": null,
            "normalize": "True",
            "sample_weight": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.explained_variance_score",
        "name": "explained_variance_score",
        "params": {
            "y_true": null,
            "y_pred": null,
            "sample_weight": "None",
            "multioutput": "'uniform_average'",
            "force_finite": "True"
        }
    },
    {
        "full_name": "sklearn.metrics.max_error",
        "name": "max_error",
        "params": {
            "y_true": null,
            "y_pred": null
        }
    },
    {
        "full_name": "sklearn.metrics.mean_absolute_error",
        "name": "mean_absolute_error",
        "params": {
            "y_true": null,
            "y_pred": null,
            "sample_weight": "None",
            "multioutput": "'uniform_average'"
        }
    },
    {
        "full_name": "sklearn.metrics.mean_squared_error",
        "name": "mean_squared_error",
        "params": {
            "y_true": null,
            "y_pred": null,
            "sample_weight": "None",
            "multioutput": "'uniform_average'",
            "squared": "True"
        }
    },
    {
        "full_name": "sklearn.metrics.mean_squared_log_error",
        "name": "mean_squared_log_error",
        "params": {
            "y_true": null,
            "y_pred": null,
            "sample_weight": "None",
            "multioutput": "'uniform_average'",
            "squared": "True"
        }
    },
    {
        "full_name": "sklearn.metrics.median_absolute_error",
        "name": "median_absolute_error",
        "params": {
            "y_true": null,
            "y_pred": null,
            "multioutput": "'uniform_average'",
            "sample_weight": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.mean_absolute_percentage_error",
        "name": "mean_absolute_percentage_error",
        "params": {
            "y_true": null,
            "y_pred": null,
            "sample_weight": "None",
            "multioutput": "'uniform_average'"
        }
    },
    {
        "full_name": "sklearn.metrics.r2_score",
        "name": "r2_score",
        "params": {
            "y_true": null,
            "y_pred": null,
            "sample_weight": "None",
            "multioutput": "'uniform_average'",
            "force_finite": "True"
        }
    },
    {
        "full_name": "sklearn.metrics.mean_poisson_deviance",
        "name": "mean_poisson_deviance",
        "params": {
            "y_true": null,
            "y_pred": null,
            "sample_weight": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.mean_gamma_deviance",
        "name": "mean_gamma_deviance",
        "params": {
            "y_true": null,
            "y_pred": null,
            "sample_weight": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.mean_tweedie_deviance",
        "name": "mean_tweedie_deviance",
        "params": {
            "y_true": null,
            "y_pred": null,
            "sample_weight": "None",
            "power": "0"
        }
    },
    {
        "full_name": "sklearn.metrics.d2_tweedie_score",
        "name": "d2_tweedie_score",
        "params": {
            "y_true": null,
            "y_pred": null,
            "sample_weight": "None",
            "power": "0"
        }
    },
    {
        "full_name": "sklearn.metrics.mean_pinball_loss",
        "name": "mean_pinball_loss",
        "params": {
            "y_true": null,
            "y_pred": null,
            "sample_weight": "None",
            "alpha": "0.5",
            "multioutput": "'uniform_average'"
        }
    },
    {
        "full_name": "sklearn.metrics.d2_pinball_score",
        "name": "d2_pinball_score",
        "params": {
            "y_true": null,
            "y_pred": null,
            "sample_weight": "None",
            "alpha": "0.5",
            "multioutput": "'uniform_average'"
        }
    },
    {
        "full_name": "sklearn.metrics.d2_absolute_error_score",
        "name": "d2_absolute_error_score",
        "params": {
            "y_true": null,
            "y_pred": null,
            "sample_weight": "None",
            "multioutput": "'uniform_average'"
        }
    },
    {
        "full_name": "sklearn.metrics.coverage_error",
        "name": "coverage_error",
        "params": {
            "y_true": null,
            "y_score": null,
            "sample_weight": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.label_ranking_average_precision_score",
        "name": "label_ranking_average_precision_score",
        "params": {
            "y_true": null,
            "y_score": null,
            "sample_weight": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.label_ranking_loss",
        "name": "label_ranking_loss",
        "params": {
            "y_true": null,
            "y_score": null,
            "sample_weight": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.adjusted_mutual_info_score",
        "name": "adjusted_mutual_info_score",
        "params": {
            "labels_true": null,
            "labels_pred": null,
            "average_method": "'arithmetic'"
        }
    },
    {
        "full_name": "sklearn.metrics.adjusted_rand_score",
        "name": "adjusted_rand_score",
        "params": {
            "labels_true": null,
            "labels_pred": null
        }
    },
    {
        "full_name": "sklearn.metrics.calinski_harabasz_score",
        "name": "calinski_harabasz_score",
        "params": {
            "X": null,
            "labels": null
        }
    },
    {
        "full_name": "sklearn.metrics.davies_bouldin_score",
        "name": "davies_bouldin_score",
        "params": {
            "X": null,
            "labels": null
        }
    },
    {
        "full_name": "sklearn.metrics.completeness_score",
        "name": "completeness_score",
        "params": {
            "labels_true": null,
            "labels_pred": null
        }
    },
    {
        "full_name": "sklearn.metrics.cluster.contingency_matrix",
        "name": "contingency_matrix",
        "params": {
            "labels_true": null,
            "labels_pred": null,
            "eps": "None",
            "sparse": "False",
            "dtype": "<class 'numpy.int64'>"
        }
    },
    {
        "full_name": "sklearn.metrics.cluster.pair_confusion_matrix",
        "name": "pair_confusion_matrix",
        "params": {
            "labels_true": null,
            "labels_pred": null
        }
    },
    {
        "full_name": "sklearn.metrics.fowlkes_mallows_score",
        "name": "fowlkes_mallows_score",
        "params": {
            "labels_true": null,
            "labels_pred": null,
            "sparse": "False"
        }
    },
    {
        "full_name": "sklearn.metrics.homogeneity_completeness_v_measure",
        "name": "homogeneity_completeness_v_measure",
        "params": {
            "labels_true": null,
            "labels_pred": null,
            "beta": "1.0"
        }
    },
    {
        "full_name": "sklearn.metrics.homogeneity_score",
        "name": "homogeneity_score",
        "params": {
            "labels_true": null,
            "labels_pred": null
        }
    },
    {
        "full_name": "sklearn.metrics.mutual_info_score",
        "name": "mutual_info_score",
        "params": {
            "labels_true": null,
            "labels_pred": null,
            "contingency": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.normalized_mutual_info_score",
        "name": "normalized_mutual_info_score",
        "params": {
            "labels_true": null,
            "labels_pred": null,
            "average_method": "'arithmetic'"
        }
    },
    {
        "full_name": "sklearn.metrics.rand_score",
        "name": "rand_score",
        "params": {
            "labels_true": null,
            "labels_pred": null
        }
    },
    {
        "full_name": "sklearn.metrics.silhouette_score",
        "name": "silhouette_score",
        "params": {
            "X": null,
            "labels": null,
            "metric": "'euclidean'",
            "sample_size": "None",
            "random_state": "None",
            "**kwds": null
        }
    },
    {
        "full_name": "sklearn.metrics.silhouette_samples",
        "name": "silhouette_samples",
        "params": {
            "X": null,
            "labels": null,
            "metric": "'euclidean'",
            "**kwds": null
        }
    },
    {
        "full_name": "sklearn.metrics.v_measure_score",
        "name": "v_measure_score",
        "params": {
            "labels_true": null,
            "labels_pred": null,
            "beta": "1.0"
        }
    },
    {
        "full_name": "sklearn.metrics.consensus_score",
        "name": "consensus_score",
        "params": {
            "a": null,
            "b": null,
            "similarity": "'jaccard'"
        }
    },
    {
        "full_name": "sklearn.metrics.DistanceMetric",
        "name": "DistanceMetric",
        "params": {}
    },
    {
        "full_name": "sklearn.metrics.pairwise.additive_chi2_kernel",
        "name": "additive_chi2_kernel",
        "params": {
            "X": null,
            "Y": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.pairwise.chi2_kernel",
        "name": "chi2_kernel",
        "params": {
            "X": null,
            "Y": "None",
            "gamma": "1.0"
        }
    },
    {
        "full_name": "sklearn.metrics.pairwise.cosine_similarity",
        "name": "cosine_similarity",
        "params": {
            "X": null,
            "Y": "None",
            "dense_output": "True"
        }
    },
    {
        "full_name": "sklearn.metrics.pairwise.cosine_distances",
        "name": "cosine_distances",
        "params": {
            "X": null,
            "Y": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.pairwise.distance_metrics",
        "name": "distance_metrics",
        "params": {}
    },
    {
        "full_name": "sklearn.metrics.pairwise.euclidean_distances",
        "name": "euclidean_distances",
        "params": {
            "X": null,
            "Y": "None",
            "Y_norm_squared": "None",
            "squared": "False",
            "X_norm_squared": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.pairwise.haversine_distances",
        "name": "haversine_distances",
        "params": {
            "X": null,
            "Y": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.pairwise.kernel_metrics",
        "name": "kernel_metrics",
        "params": {}
    },
    {
        "full_name": "sklearn.metrics.pairwise.laplacian_kernel",
        "name": "laplacian_kernel",
        "params": {
            "X": null,
            "Y": "None",
            "gamma": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.pairwise.linear_kernel",
        "name": "linear_kernel",
        "params": {
            "X": null,
            "Y": "None",
            "dense_output": "True"
        }
    },
    {
        "full_name": "sklearn.metrics.pairwise.manhattan_distances",
        "name": "manhattan_distances",
        "params": {
            "X": null,
            "Y": "None",
            "sum_over_features": "True"
        }
    },
    {
        "full_name": "sklearn.metrics.pairwise.nan_euclidean_distances",
        "name": "nan_euclidean_distances",
        "params": {
            "X": null,
            "Y": "None",
            "squared": "False",
            "missing_values": "nan",
            "copy": "True"
        }
    },
    {
        "full_name": "sklearn.metrics.pairwise.pairwise_kernels",
        "name": "pairwise_kernels",
        "params": {
            "X": null,
            "Y": "None",
            "metric": "'linear'",
            "filter_params": "False",
            "n_jobs": "None",
            "**kwds": null
        }
    },
    {
        "full_name": "sklearn.metrics.pairwise.polynomial_kernel",
        "name": "polynomial_kernel",
        "params": {
            "X": null,
            "Y": "None",
            "degree": "3",
            "gamma": "None",
            "coef0": "1"
        }
    },
    {
        "full_name": "sklearn.metrics.pairwise.rbf_kernel",
        "name": "rbf_kernel",
        "params": {
            "X": null,
            "Y": "None",
            "gamma": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.pairwise.sigmoid_kernel",
        "name": "sigmoid_kernel",
        "params": {
            "X": null,
            "Y": "None",
            "gamma": "None",
            "coef0": "1"
        }
    },
    {
        "full_name": "sklearn.metrics.pairwise.paired_euclidean_distances",
        "name": "paired_euclidean_distances",
        "params": {
            "X": null,
            "Y": null
        }
    },
    {
        "full_name": "sklearn.metrics.pairwise.paired_manhattan_distances",
        "name": "paired_manhattan_distances",
        "params": {
            "X": null,
            "Y": null
        }
    },
    {
        "full_name": "sklearn.metrics.pairwise.paired_cosine_distances",
        "name": "paired_cosine_distances",
        "params": {
            "X": null,
            "Y": null
        }
    },
    {
        "full_name": "sklearn.metrics.pairwise.paired_distances",
        "name": "paired_distances",
        "params": {
            "X": null,
            "Y": null,
            "metric": "'euclidean'",
            "**kwds": null
        }
    },
    {
        "full_name": "sklearn.metrics.pairwise_distances",
        "name": "pairwise_distances",
        "params": {
            "X": null,
            "Y": "None",
            "metric": "'euclidean'",
            "n_jobs": "None",
            "force_all_finite": "True",
            "**kwds": null
        }
    },
    {
        "full_name": "sklearn.metrics.pairwise_distances_argmin",
        "name": "pairwise_distances_argmin",
        "params": {
            "X": null,
            "Y": null,
            "axis": "1",
            "metric": "'euclidean'",
            "metric_kwargs": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.pairwise_distances_argmin_min",
        "name": "pairwise_distances_argmin_min",
        "params": {
            "X": null,
            "Y": null,
            "axis": "1",
            "metric": "'euclidean'",
            "metric_kwargs": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.pairwise_distances_chunked",
        "name": "pairwise_distances_chunked",
        "params": {
            "X": null,
            "Y": "None",
            "reduce_func": "None",
            "metric": "'euclidean'",
            "n_jobs": "None",
            "working_memory": "None",
            "**kwds": null
        }
    },
    {
        "full_name": "sklearn.metrics.plot_confusion_matrix",
        "name": "plot_confusion_matrix",
        "params": {
            "estimator": null,
            "X": null,
            "y_true": null,
            "labels": "None",
            "sample_weight": "None",
            "normalize": "None",
            "display_labels": "None",
            "include_values": "True",
            "xticks_rotation": "'horizontal'",
            "values_format": "None",
            "cmap": "'viridis'",
            "ax": "None",
            "colorbar": "True"
        }
    },
    {
        "full_name": "sklearn.metrics.plot_det_curve",
        "name": "plot_det_curve",
        "params": {
            "estimator": null,
            "X": null,
            "y": null,
            "sample_weight": "None",
            "response_method": "'auto'",
            "name": "None",
            "ax": "None",
            "pos_label": "None",
            "**kwargs": null
        }
    },
    {
        "full_name": "sklearn.metrics.plot_precision_recall_curve",
        "name": "plot_precision_recall_curve",
        "params": {
            "estimator": null,
            "X": null,
            "y": null,
            "sample_weight": "None",
            "response_method": "'auto'",
            "name": "None",
            "ax": "None",
            "pos_label": "None",
            "**kwargs": null
        }
    },
    {
        "full_name": "sklearn.metrics.plot_roc_curve",
        "name": "plot_roc_curve",
        "params": {
            "estimator": null,
            "X": null,
            "y": null,
            "sample_weight": "None",
            "drop_intermediate": "True",
            "response_method": "'auto'",
            "name": "None",
            "ax": "None",
            "pos_label": "None",
            "**kwargs": null
        }
    },
    {
        "full_name": "sklearn.metrics.ConfusionMatrixDisplay",
        "name": "ConfusionMatrixDisplay",
        "params": {
            "confusion_matrix": null,
            "display_labels": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.DetCurveDisplay",
        "name": "DetCurveDisplay",
        "params": {
            "fpr": null,
            "fnr": null,
            "estimator_name": "None",
            "pos_label": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.PrecisionRecallDisplay",
        "name": "PrecisionRecallDisplay",
        "params": {
            "precision": null,
            "recall": null,
            "average_precision": "None",
            "estimator_name": "None",
            "pos_label": "None"
        }
    },
    {
        "full_name": "sklearn.metrics.RocCurveDisplay",
        "name": "RocCurveDisplay",
        "params": {
            "fpr": null,
            "tpr": null,
            "roc_auc": "None",
            "estimator_name": "None",
            "pos_label": "None"
        }
    },
    {
        "full_name": "sklearn.calibration.CalibrationDisplay",
        "name": "CalibrationDisplay",
        "params": {
            "prob_true": null,
            "prob_pred": null,
            "y_prob": null,
            "estimator_name": "None",
            "pos_label": "None"
        }
    },
    {
        "full_name": "sklearn.mixture.BayesianGaussianMixture",
        "name": "BayesianGaussianMixture",
        "params": {
            "n_components": "1",
            "covariance_type": "'full'",
            "tol": "0.001",
            "reg_covar": "1e-06",
            "max_iter": "100",
            "n_init": "1",
            "init_params": "'kmeans'",
            "weight_concentration_prior_type": "'dirichlet_process'",
            "weight_concentration_prior": "None",
            "mean_precision_prior": "None",
            "mean_prior": "None",
            "degrees_of_freedom_prior": "None",
            "covariance_prior": "None",
            "random_state": "None",
            "warm_start": "False",
            "verbose": "0",
            "verbose_interval": "10"
        }
    },
    {
        "full_name": "sklearn.mixture.GaussianMixture",
        "name": "GaussianMixture",
        "params": {
            "n_components": "1",
            "covariance_type": "'full'",
            "tol": "0.001",
            "reg_covar": "1e-06",
            "max_iter": "100",
            "n_init": "1",
            "init_params": "'kmeans'",
            "weights_init": "None",
            "means_init": "None",
            "precisions_init": "None",
            "random_state": "None",
            "warm_start": "False",
            "verbose": "0",
            "verbose_interval": "10"
        }
    },
    {
        "full_name": "sklearn.model_selection.GroupKFold",
        "name": "GroupKFold",
        "params": {
            "n_splits": "5"
        }
    },
    {
        "full_name": "sklearn.model_selection.GroupShuffleSplit",
        "name": "GroupShuffleSplit",
        "params": {
            "n_splits": "5",
            "test_size": "None",
            "train_size": "None",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.model_selection.KFold",
        "name": "KFold",
        "params": {
            "n_splits": "5",
            "shuffle": "False",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.model_selection.LeaveOneGroupOut",
        "name": "LeaveOneGroupOut",
        "params": {}
    },
    {
        "full_name": "sklearn.model_selection.LeavePGroupsOut",
        "name": "LeavePGroupsOut",
        "params": {
            "n_groups": null
        }
    },
    {
        "full_name": "sklearn.model_selection.LeaveOneOut",
        "name": "LeaveOneOut",
        "params": {}
    },
    {
        "full_name": "sklearn.model_selection.LeavePOut",
        "name": "LeavePOut",
        "params": {
            "p": null
        }
    },
    {
        "full_name": "sklearn.model_selection.PredefinedSplit",
        "name": "PredefinedSplit",
        "params": {
            "test_fold": null
        }
    },
    {
        "full_name": "sklearn.model_selection.RepeatedKFold",
        "name": "RepeatedKFold",
        "params": {
            "n_splits": "5",
            "n_repeats": "10",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.model_selection.RepeatedStratifiedKFold",
        "name": "RepeatedStratifiedKFold",
        "params": {
            "n_splits": "5",
            "n_repeats": "10",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.model_selection.ShuffleSplit",
        "name": "ShuffleSplit",
        "params": {
            "n_splits": "10",
            "test_size": "None",
            "train_size": "None",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.model_selection.StratifiedKFold",
        "name": "StratifiedKFold",
        "params": {
            "n_splits": "5",
            "shuffle": "False",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.model_selection.StratifiedShuffleSplit",
        "name": "StratifiedShuffleSplit",
        "params": {
            "n_splits": "10",
            "test_size": "None",
            "train_size": "None",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.model_selection.StratifiedGroupKFold",
        "name": "StratifiedGroupKFold",
        "params": {
            "n_splits": "5",
            "shuffle": "False",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.model_selection.TimeSeriesSplit",
        "name": "TimeSeriesSplit",
        "params": {
            "n_splits": "5",
            "max_train_size": "None",
            "test_size": "None",
            "gap": "0"
        }
    },
    {
        "full_name": "sklearn.model_selection.check_cv",
        "name": "check_cv",
        "params": {
            "cv": "5",
            "y": "None",
            "classifier": "False"
        }
    },
    {
        "full_name": "sklearn.model_selection.train_test_split",
        "name": "train_test_split",
        "params": {
            "*arrays": null,
            "test_size": "None",
            "train_size": "None",
            "random_state": "None",
            "shuffle": "True",
            "stratify": "None"
        }
    },
    {
        "full_name": "sklearn.model_selection.GridSearchCV",
        "name": "GridSearchCV",
        "params": {
            "estimator": null,
            "param_grid": null,
            "scoring": "None",
            "n_jobs": "None",
            "refit": "True",
            "cv": "None",
            "verbose": "0",
            "pre_dispatch": "'2*n_jobs'",
            "error_score": "nan",
            "return_train_score": "False"
        }
    },
    {
        "full_name": "sklearn.model_selection.HalvingGridSearchCV",
        "name": "HalvingGridSearchCV",
        "params": {
            "estimator": null,
            "param_grid": null,
            "factor": "3",
            "resource": "'n_samples'",
            "max_resources": "'auto'",
            "min_resources": "'exhaust'",
            "aggressive_elimination": "False",
            "cv": "5",
            "scoring": "None",
            "refit": "True",
            "error_score": "nan",
            "return_train_score": "True",
            "random_state": "None",
            "n_jobs": "None",
            "verbose": "0"
        }
    },
    {
        "full_name": "sklearn.model_selection.ParameterGrid",
        "name": "ParameterGrid",
        "params": {
            "param_grid": null
        }
    },
    {
        "full_name": "sklearn.model_selection.ParameterSampler",
        "name": "ParameterSampler",
        "params": {
            "param_distributions": null,
            "n_iter": null,
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.model_selection.RandomizedSearchCV",
        "name": "RandomizedSearchCV",
        "params": {
            "estimator": null,
            "param_distributions": null,
            "n_iter": "10",
            "scoring": "None",
            "n_jobs": "None",
            "refit": "True",
            "cv": "None",
            "verbose": "0",
            "pre_dispatch": "'2*n_jobs'",
            "random_state": "None",
            "error_score": "nan",
            "return_train_score": "False"
        }
    },
    {
        "full_name": "sklearn.model_selection.HalvingRandomSearchCV",
        "name": "HalvingRandomSearchCV",
        "params": {
            "estimator": null,
            "param_distributions": null,
            "n_candidates": "'exhaust'",
            "factor": "3",
            "resource": "'n_samples'",
            "max_resources": "'auto'",
            "min_resources": "'smallest'",
            "aggressive_elimination": "False",
            "cv": "5",
            "scoring": "None",
            "refit": "True",
            "error_score": "nan",
            "return_train_score": "True",
            "random_state": "None",
            "n_jobs": "None",
            "verbose": "0"
        }
    },
    {
        "full_name": "sklearn.model_selection.cross_validate",
        "name": "cross_validate",
        "params": {
            "estimator": null,
            "X": null,
            "y": "None",
            "groups": "None",
            "scoring": "None",
            "cv": "None",
            "n_jobs": "None",
            "verbose": "0",
            "fit_params": "None",
            "pre_dispatch": "'2*n_jobs'",
            "return_train_score": "False",
            "return_estimator": "False",
            "error_score": "nan"
        }
    },
    {
        "full_name": "sklearn.model_selection.cross_val_predict",
        "name": "cross_val_predict",
        "params": {
            "estimator": null,
            "X": null,
            "y": "None",
            "groups": "None",
            "cv": "None",
            "n_jobs": "None",
            "verbose": "0",
            "fit_params": "None",
            "pre_dispatch": "'2*n_jobs'",
            "method": "'predict'"
        }
    },
    {
        "full_name": "sklearn.model_selection.cross_val_score",
        "name": "cross_val_score",
        "params": {
            "estimator": null,
            "X": null,
            "y": "None",
            "groups": "None",
            "scoring": "None",
            "cv": "None",
            "n_jobs": "None",
            "verbose": "0",
            "fit_params": "None",
            "pre_dispatch": "'2*n_jobs'",
            "error_score": "nan"
        }
    },
    {
        "full_name": "sklearn.model_selection.learning_curve",
        "name": "learning_curve",
        "params": {
            "estimator": null,
            "X": null,
            "y": null,
            "groups": "None",
            "train_sizes": "array([0.1, 0.33, 0.55, 0.78, 1.])",
            "cv": "None",
            "scoring": "None",
            "exploit_incremental_learning": "False",
            "n_jobs": "None",
            "pre_dispatch": "'all'",
            "verbose": "0",
            "shuffle": "False",
            "random_state": "None",
            "error_score": "nan",
            "return_times": "False",
            "fit_params": "None"
        }
    },
    {
        "full_name": "sklearn.model_selection.permutation_test_score",
        "name": "permutation_test_score",
        "params": {
            "estimator": null,
            "X": null,
            "y": null,
            "groups": "None",
            "cv": "None",
            "n_permutations": "100",
            "n_jobs": "None",
            "random_state": "0",
            "verbose": "0",
            "scoring": "None",
            "fit_params": "None"
        }
    },
    {
        "full_name": "sklearn.model_selection.validation_curve",
        "name": "validation_curve",
        "params": {
            "estimator": null,
            "X": null,
            "y": null,
            "param_name": null,
            "param_range": null,
            "groups": "None",
            "cv": "None",
            "scoring": "None",
            "n_jobs": "None",
            "pre_dispatch": "'all'",
            "verbose": "0",
            "error_score": "nan",
            "fit_params": "None"
        }
    },
    {
        "full_name": "sklearn.multiclass.OneVsRestClassifier",
        "name": "OneVsRestClassifier",
        "params": {
            "estimator": null,
            "n_jobs": "None",
            "verbose": "0"
        }
    },
    {
        "full_name": "sklearn.multiclass.OneVsOneClassifier",
        "name": "OneVsOneClassifier",
        "params": {
            "estimator": null,
            "n_jobs": "None"
        }
    },
    {
        "full_name": "sklearn.multiclass.OutputCodeClassifier",
        "name": "OutputCodeClassifier",
        "params": {
            "estimator": null,
            "code_size": "1.5",
            "random_state": "None",
            "n_jobs": "None"
        }
    },
    {
        "full_name": "sklearn.multioutput.ClassifierChain",
        "name": "ClassifierChain",
        "params": {
            "base_estimator": null,
            "order": "None",
            "cv": "None",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.multioutput.MultiOutputRegressor",
        "name": "MultiOutputRegressor",
        "params": {
            "estimator": null,
            "n_jobs": "None"
        }
    },
    {
        "full_name": "sklearn.multioutput.MultiOutputClassifier",
        "name": "MultiOutputClassifier",
        "params": {
            "estimator": null,
            "n_jobs": "None"
        }
    },
    {
        "full_name": "sklearn.multioutput.RegressorChain",
        "name": "RegressorChain",
        "params": {
            "base_estimator": null,
            "order": "None",
            "cv": "None",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.naive_bayes.BernoulliNB",
        "name": "BernoulliNB",
        "params": {
            "alpha": "1.0",
            "binarize": "0.0",
            "fit_prior": "True",
            "class_prior": "None"
        }
    },
    {
        "full_name": "sklearn.naive_bayes.CategoricalNB",
        "name": "CategoricalNB",
        "params": {
            "alpha": "1.0",
            "fit_prior": "True",
            "class_prior": "None",
            "min_categories": "None"
        }
    },
    {
        "full_name": "sklearn.naive_bayes.ComplementNB",
        "name": "ComplementNB",
        "params": {
            "alpha": "1.0",
            "fit_prior": "True",
            "class_prior": "None",
            "norm": "False"
        }
    },
    {
        "full_name": "sklearn.naive_bayes.GaussianNB",
        "name": "GaussianNB",
        "params": {
            "priors": "None",
            "var_smoothing": "1e-09"
        }
    },
    {
        "full_name": "sklearn.naive_bayes.MultinomialNB",
        "name": "MultinomialNB",
        "params": {
            "alpha": "1.0",
            "fit_prior": "True",
            "class_prior": "None"
        }
    },
    {
        "full_name": "sklearn.neighbors.BallTree",
        "name": "BallTree",
        "params": {
            "X": null,
            "leaf_size": "40",
            "metric": "'minkowski'",
            "**kwargs": null
        }
    },
    {
        "full_name": "sklearn.neighbors.KDTree",
        "name": "KDTree",
        "params": {
            "X": null,
            "leaf_size": "40",
            "metric": "'minkowski'",
            "**kwargs": null
        }
    },
    {
        "full_name": "sklearn.neighbors.KernelDensity",
        "name": "KernelDensity",
        "params": {
            "bandwidth": "1.0",
            "algorithm": "'auto'",
            "kernel": "'gaussian'",
            "metric": "'euclidean'",
            "atol": "0",
            "rtol": "0",
            "breadth_first": "True",
            "leaf_size": "40",
            "metric_params": "None"
        }
    },
    {
        "full_name": "sklearn.neighbors.KNeighborsClassifier",
        "name": "KNeighborsClassifier",
        "params": {
            "n_neighbors": "5",
            "weights": "'uniform'",
            "algorithm": "'auto'",
            "leaf_size": "30",
            "p": "2",
            "metric": "'minkowski'",
            "metric_params": "None",
            "n_jobs": "None"
        }
    },
    {
        "full_name": "sklearn.neighbors.KNeighborsRegressor",
        "name": "KNeighborsRegressor",
        "params": {
            "n_neighbors": "5",
            "weights": "'uniform'",
            "algorithm": "'auto'",
            "leaf_size": "30",
            "p": "2",
            "metric": "'minkowski'",
            "metric_params": "None",
            "n_jobs": "None"
        }
    },
    {
        "full_name": "sklearn.neighbors.KNeighborsTransformer",
        "name": "KNeighborsTransformer",
        "params": {
            "mode": "'distance'",
            "n_neighbors": "5",
            "algorithm": "'auto'",
            "leaf_size": "30",
            "metric": "'minkowski'",
            "p": "2",
            "metric_params": "None",
            "n_jobs": "1"
        }
    },
    {
        "full_name": "sklearn.neighbors.LocalOutlierFactor",
        "name": "LocalOutlierFactor",
        "params": {
            "n_neighbors": "20",
            "algorithm": "'auto'",
            "leaf_size": "30",
            "metric": "'minkowski'",
            "p": "2",
            "metric_params": "None",
            "contamination": "'auto'",
            "novelty": "False",
            "n_jobs": "None"
        }
    },
    {
        "full_name": "sklearn.neighbors.RadiusNeighborsClassifier",
        "name": "RadiusNeighborsClassifier",
        "params": {
            "radius": "1.0",
            "weights": "'uniform'",
            "algorithm": "'auto'",
            "leaf_size": "30",
            "p": "2",
            "metric": "'minkowski'",
            "outlier_label": "None",
            "metric_params": "None",
            "n_jobs": "None",
            "**kwargs": null
        }
    },
    {
        "full_name": "sklearn.neighbors.RadiusNeighborsRegressor",
        "name": "RadiusNeighborsRegressor",
        "params": {
            "radius": "1.0",
            "weights": "'uniform'",
            "algorithm": "'auto'",
            "leaf_size": "30",
            "p": "2",
            "metric": "'minkowski'",
            "metric_params": "None",
            "n_jobs": "None"
        }
    },
    {
        "full_name": "sklearn.neighbors.RadiusNeighborsTransformer",
        "name": "RadiusNeighborsTransformer",
        "params": {
            "mode": "'distance'",
            "radius": "1.0",
            "algorithm": "'auto'",
            "leaf_size": "30",
            "metric": "'minkowski'",
            "p": "2",
            "metric_params": "None",
            "n_jobs": "1"
        }
    },
    {
        "full_name": "sklearn.neighbors.NearestCentroid",
        "name": "NearestCentroid",
        "params": {
            "metric": "'euclidean'",
            "shrink_threshold": "None"
        }
    },
    {
        "full_name": "sklearn.neighbors.NearestNeighbors",
        "name": "NearestNeighbors",
        "params": {
            "n_neighbors": "5",
            "radius": "1.0",
            "algorithm": "'auto'",
            "leaf_size": "30",
            "metric": "'minkowski'",
            "p": "2",
            "metric_params": "None",
            "n_jobs": "None"
        }
    },
    {
        "full_name": "sklearn.neighbors.NeighborhoodComponentsAnalysis",
        "name": "NeighborhoodComponentsAnalysis",
        "params": {
            "n_components": "None",
            "init": "'auto'",
            "warm_start": "False",
            "max_iter": "50",
            "tol": "1e-05",
            "callback": "None",
            "verbose": "0",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.neighbors.kneighbors_graph",
        "name": "kneighbors_graph",
        "params": {
            "X": null,
            "n_neighbors": null,
            "mode": "'connectivity'",
            "metric": "'minkowski'",
            "p": "2",
            "metric_params": "None",
            "include_self": "False",
            "n_jobs": "None"
        }
    },
    {
        "full_name": "sklearn.neighbors.radius_neighbors_graph",
        "name": "radius_neighbors_graph",
        "params": {
            "X": null,
            "radius": null,
            "mode": "'connectivity'",
            "metric": "'minkowski'",
            "p": "2",
            "metric_params": "None",
            "include_self": "False",
            "n_jobs": "None"
        }
    },
    {
        "full_name": "sklearn.neural_network.BernoulliRBM",
        "name": "BernoulliRBM",
        "params": {
            "n_components": "256",
            "learning_rate": "0.1",
            "batch_size": "10",
            "n_iter": "10",
            "verbose": "0",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.neural_network.MLPClassifier",
        "name": "MLPClassifier",
        "params": {
            "hidden_layer_sizes": "(100,)",
            "activation": "'relu'",
            "solver": "'adam'",
            "alpha": "0.0001",
            "batch_size": "'auto'",
            "learning_rate": "'constant'",
            "learning_rate_init": "0.001",
            "power_t": "0.5",
            "max_iter": "200",
            "shuffle": "True",
            "random_state": "None",
            "tol": "0.0001",
            "verbose": "False",
            "warm_start": "False",
            "momentum": "0.9",
            "nesterovs_momentum": "True",
            "early_stopping": "False",
            "validation_fraction": "0.1",
            "beta_1": "0.9",
            "beta_2": "0.999",
            "epsilon": "1e-08",
            "n_iter_no_change": "10",
            "max_fun": "15000"
        }
    },
    {
        "full_name": "sklearn.neural_network.MLPRegressor",
        "name": "MLPRegressor",
        "params": {
            "hidden_layer_sizes": "(100,)",
            "activation": "'relu'",
            "solver": "'adam'",
            "alpha": "0.0001",
            "batch_size": "'auto'",
            "learning_rate": "'constant'",
            "learning_rate_init": "0.001",
            "power_t": "0.5",
            "max_iter": "200",
            "shuffle": "True",
            "random_state": "None",
            "tol": "0.0001",
            "verbose": "False",
            "warm_start": "False",
            "momentum": "0.9",
            "nesterovs_momentum": "True",
            "early_stopping": "False",
            "validation_fraction": "0.1",
            "beta_1": "0.9",
            "beta_2": "0.999",
            "epsilon": "1e-08",
            "n_iter_no_change": "10",
            "max_fun": "15000"
        }
    },
    {
        "full_name": "sklearn.pipeline.FeatureUnion",
        "name": "FeatureUnion",
        "params": {
            "transformer_list": null,
            "n_jobs": "None",
            "transformer_weights": "None",
            "verbose": "False"
        }
    },
    {
        "full_name": "sklearn.pipeline.Pipeline",
        "name": "Pipeline",
        "params": {
            "steps": null,
            "memory": "None",
            "verbose": "False"
        }
    },
    {
        "full_name": "sklearn.pipeline.make_pipeline",
        "name": "make_pipeline",
        "params": {
            "*steps": null,
            "memory": "None",
            "verbose": "False"
        }
    },
    {
        "full_name": "sklearn.pipeline.make_union",
        "name": "make_union",
        "params": {
            "*transformers": null,
            "n_jobs": "None",
            "verbose": "False"
        }
    },
    {
        "full_name": "sklearn.preprocessing.Binarizer",
        "name": "Binarizer",
        "params": {
            "threshold": "0.0",
            "copy": "True"
        }
    },
    {
        "full_name": "sklearn.preprocessing.FunctionTransformer",
        "name": "FunctionTransformer",
        "params": {
            "func": "None",
            "inverse_func": "None",
            "validate": "False",
            "accept_sparse": "False",
            "check_inverse": "True",
            "feature_names_out": "None",
            "kw_args": "None",
            "inv_kw_args": "None"
        }
    },
    {
        "full_name": "sklearn.preprocessing.KBinsDiscretizer",
        "name": "KBinsDiscretizer",
        "params": {
            "n_bins": "5",
            "encode": "'onehot'",
            "strategy": "'quantile'",
            "dtype": "None",
            "subsample": "'warn'",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.preprocessing.KernelCenterer",
        "name": "KernelCenterer",
        "params": {}
    },
    {
        "full_name": "sklearn.preprocessing.LabelBinarizer",
        "name": "LabelBinarizer",
        "params": {
            "neg_label": "0",
            "pos_label": "1",
            "sparse_output": "False"
        }
    },
    {
        "full_name": "sklearn.preprocessing.LabelEncoder",
        "name": "LabelEncoder",
        "params": {}
    },
    {
        "full_name": "sklearn.preprocessing.MultiLabelBinarizer",
        "name": "MultiLabelBinarizer",
        "params": {
            "classes": "None",
            "sparse_output": "False"
        }
    },
    {
        "full_name": "sklearn.preprocessing.MaxAbsScaler",
        "name": "MaxAbsScaler",
        "params": {
            "copy": "True"
        }
    },
    {
        "full_name": "sklearn.preprocessing.MinMaxScaler",
        "name": "MinMaxScaler",
        "params": {
            "feature_range": "(0, 1)",
            "copy": "True",
            "clip": "False"
        }
    },
    {
        "full_name": "sklearn.preprocessing.Normalizer",
        "name": "Normalizer",
        "params": {
            "norm": "'l2'",
            "copy": "True"
        }
    },
    {
        "full_name": "sklearn.preprocessing.OneHotEncoder",
        "name": "OneHotEncoder",
        "params": {
            "categories": "'auto'",
            "drop": "None",
            "sparse": "True",
            "dtype": "<class 'numpy.float64'>",
            "handle_unknown": "'error'",
            "min_frequency": "None",
            "max_categories": "None"
        }
    },
    {
        "full_name": "sklearn.preprocessing.OrdinalEncoder",
        "name": "OrdinalEncoder",
        "params": {
            "categories": "'auto'",
            "dtype": "<class 'numpy.float64'>",
            "handle_unknown": "'error'",
            "unknown_value": "None",
            "encoded_missing_value": "nan"
        }
    },
    {
        "full_name": "sklearn.preprocessing.PolynomialFeatures",
        "name": "PolynomialFeatures",
        "params": {
            "degree": "2",
            "interaction_only": "False",
            "include_bias": "True",
            "order": "'C'"
        }
    },
    {
        "full_name": "sklearn.preprocessing.PowerTransformer",
        "name": "PowerTransformer",
        "params": {
            "method": "'yeo-johnson'",
            "standardize": "True",
            "copy": "True"
        }
    },
    {
        "full_name": "sklearn.preprocessing.QuantileTransformer",
        "name": "QuantileTransformer",
        "params": {
            "n_quantiles": "1000",
            "output_distribution": "'uniform'",
            "ignore_implicit_zeros": "False",
            "subsample": "100000",
            "random_state": "None",
            "copy": "True"
        }
    },
    {
        "full_name": "sklearn.preprocessing.RobustScaler",
        "name": "RobustScaler",
        "params": {
            "with_centering": "True",
            "with_scaling": "True",
            "quantile_range": "(25.0, 75.0)",
            "copy": "True",
            "unit_variance": "False"
        }
    },
    {
        "full_name": "sklearn.preprocessing.SplineTransformer",
        "name": "SplineTransformer",
        "params": {
            "n_knots": "5",
            "degree": "3",
            "knots": "'uniform'",
            "extrapolation": "'constant'",
            "include_bias": "True",
            "order": "'C'"
        }
    },
    {
        "full_name": "sklearn.preprocessing.StandardScaler",
        "name": "StandardScaler",
        "params": {
            "copy": "True",
            "with_mean": "True",
            "with_std": "True"
        }
    },
    {
        "full_name": "sklearn.preprocessing.add_dummy_feature",
        "name": "add_dummy_feature",
        "params": {
            "X": null,
            "value": "1.0"
        }
    },
    {
        "full_name": "sklearn.preprocessing.binarize",
        "name": "binarize",
        "params": {
            "X": null,
            "threshold": "0.0",
            "copy": "True"
        }
    },
    {
        "full_name": "sklearn.preprocessing.label_binarize",
        "name": "label_binarize",
        "params": {
            "y": null,
            "classes": null,
            "neg_label": "0",
            "pos_label": "1",
            "sparse_output": "False"
        }
    },
    {
        "full_name": "sklearn.preprocessing.maxabs_scale",
        "name": "maxabs_scale",
        "params": {
            "X": null,
            "axis": "0",
            "copy": "True"
        }
    },
    {
        "full_name": "sklearn.preprocessing.minmax_scale",
        "name": "minmax_scale",
        "params": {
            "X": null,
            "feature_range": "(0, 1)",
            "axis": "0",
            "copy": "True"
        }
    },
    {
        "full_name": "sklearn.preprocessing.normalize",
        "name": "normalize",
        "params": {
            "X": null,
            "norm": "'l2'",
            "axis": "1",
            "copy": "True",
            "return_norm": "False"
        }
    },
    {
        "full_name": "sklearn.preprocessing.quantile_transform",
        "name": "quantile_transform",
        "params": {
            "X": null,
            "axis": "0",
            "n_quantiles": "1000",
            "output_distribution": "'uniform'",
            "ignore_implicit_zeros": "False",
            "subsample": "100000",
            "random_state": "None",
            "copy": "True"
        }
    },
    {
        "full_name": "sklearn.preprocessing.robust_scale",
        "name": "robust_scale",
        "params": {
            "X": null,
            "axis": "0",
            "with_centering": "True",
            "with_scaling": "True",
            "quantile_range": "(25.0, 75.0)",
            "copy": "True",
            "unit_variance": "False"
        }
    },
    {
        "full_name": "sklearn.preprocessing.scale",
        "name": "scale",
        "params": {
            "X": null,
            "axis": "0",
            "with_mean": "True",
            "with_std": "True",
            "copy": "True"
        }
    },
    {
        "full_name": "sklearn.preprocessing.power_transform",
        "name": "power_transform",
        "params": {
            "X": null,
            "method": "'yeo-johnson'",
            "standardize": "True",
            "copy": "True"
        }
    },
    {
        "full_name": "sklearn.random_projection.GaussianRandomProjection",
        "name": "GaussianRandomProjection",
        "params": {
            "n_components": "'auto'",
            "eps": "0.1",
            "compute_inverse_components": "False",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.random_projection.SparseRandomProjection",
        "name": "SparseRandomProjection",
        "params": {
            "n_components": "'auto'",
            "density": "'auto'",
            "eps": "0.1",
            "dense_output": "False",
            "compute_inverse_components": "False",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.random_projection.johnson_lindenstrauss_min_dim",
        "name": "johnson_lindenstrauss_min_dim",
        "params": {
            "n_samples": null,
            "eps": "0.1"
        }
    },
    {
        "full_name": "sklearn.semi_supervised.LabelPropagation",
        "name": "LabelPropagation",
        "params": {
            "kernel": "'rbf'",
            "gamma": "20",
            "n_neighbors": "7",
            "max_iter": "1000",
            "tol": "0.001",
            "n_jobs": "None"
        }
    },
    {
        "full_name": "sklearn.semi_supervised.LabelSpreading",
        "name": "LabelSpreading",
        "params": {
            "kernel": "'rbf'",
            "gamma": "20",
            "n_neighbors": "7",
            "alpha": "0.2",
            "max_iter": "30",
            "tol": "0.001",
            "n_jobs": "None"
        }
    },
    {
        "full_name": "sklearn.semi_supervised.SelfTrainingClassifier",
        "name": "SelfTrainingClassifier",
        "params": {
            "base_estimator": null,
            "threshold": "0.75",
            "criterion": "'threshold'",
            "k_best": "10",
            "max_iter": "10",
            "verbose": "False"
        }
    },
    {
        "full_name": "sklearn.svm.LinearSVC",
        "name": "LinearSVC",
        "params": {
            "penalty": "'l2'",
            "loss": "'squared_hinge'",
            "dual": "True",
            "tol": "0.0001",
            "C": "1.0",
            "multi_class": "'ovr'",
            "fit_intercept": "True",
            "intercept_scaling": "1",
            "class_weight": "None",
            "verbose": "0",
            "random_state": "None",
            "max_iter": "1000"
        }
    },
    {
        "full_name": "sklearn.svm.LinearSVR",
        "name": "LinearSVR",
        "params": {
            "epsilon": "0.0",
            "tol": "0.0001",
            "C": "1.0",
            "loss": "'epsilon_insensitive'",
            "fit_intercept": "True",
            "intercept_scaling": "1.0",
            "dual": "True",
            "verbose": "0",
            "random_state": "None",
            "max_iter": "1000"
        }
    },
    {
        "full_name": "sklearn.svm.NuSVC",
        "name": "NuSVC",
        "params": {
            "nu": "0.5",
            "kernel": "'rbf'",
            "degree": "3",
            "gamma": "'scale'",
            "coef0": "0.0",
            "shrinking": "True",
            "probability": "False",
            "tol": "0.001",
            "cache_size": "200",
            "class_weight": "None",
            "verbose": "False",
            "max_iter": "- 1",
            "decision_function_shape": "'ovr'",
            "break_ties": "False",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.svm.NuSVR",
        "name": "NuSVR",
        "params": {
            "nu": "0.5",
            "C": "1.0",
            "kernel": "'rbf'",
            "degree": "3",
            "gamma": "'scale'",
            "coef0": "0.0",
            "shrinking": "True",
            "tol": "0.001",
            "cache_size": "200",
            "verbose": "False",
            "max_iter": "- 1"
        }
    },
    {
        "full_name": "sklearn.svm.OneClassSVM",
        "name": "OneClassSVM",
        "params": {
            "kernel": "'rbf'",
            "degree": "3",
            "gamma": "'scale'",
            "coef0": "0.0",
            "tol": "0.001",
            "nu": "0.5",
            "shrinking": "True",
            "cache_size": "200",
            "verbose": "False",
            "max_iter": "- 1"
        }
    },
    {
        "full_name": "sklearn.svm.SVC",
        "name": "SVC",
        "params": {
            "C": "1.0",
            "kernel": "'rbf'",
            "degree": "3",
            "gamma": "'scale'",
            "coef0": "0.0",
            "shrinking": "True",
            "probability": "False",
            "tol": "0.001",
            "cache_size": "200",
            "class_weight": "None",
            "verbose": "False",
            "max_iter": "- 1",
            "decision_function_shape": "'ovr'",
            "break_ties": "False",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.svm.SVR",
        "name": "SVR",
        "params": {
            "kernel": "'rbf'",
            "degree": "3",
            "gamma": "'scale'",
            "coef0": "0.0",
            "tol": "0.001",
            "C": "1.0",
            "epsilon": "0.1",
            "shrinking": "True",
            "cache_size": "200",
            "verbose": "False",
            "max_iter": "- 1"
        }
    },
    {
        "full_name": "sklearn.svm.l1_min_c",
        "name": "l1_min_c",
        "params": {
            "X": null,
            "y": null,
            "loss": "'squared_hinge'",
            "fit_intercept": "True",
            "intercept_scaling": "1.0"
        }
    },
    {
        "full_name": "sklearn.tree.DecisionTreeClassifier",
        "name": "DecisionTreeClassifier",
        "params": {
            "criterion": "'gini'",
            "splitter": "'best'",
            "max_depth": "None",
            "min_samples_split": "2",
            "min_samples_leaf": "1",
            "min_weight_fraction_leaf": "0.0",
            "max_features": "None",
            "random_state": "None",
            "max_leaf_nodes": "None",
            "min_impurity_decrease": "0.0",
            "class_weight": "None",
            "ccp_alpha": "0.0"
        }
    },
    {
        "full_name": "sklearn.tree.DecisionTreeRegressor",
        "name": "DecisionTreeRegressor",
        "params": {
            "criterion": "'squared_error'",
            "splitter": "'best'",
            "max_depth": "None",
            "min_samples_split": "2",
            "min_samples_leaf": "1",
            "min_weight_fraction_leaf": "0.0",
            "max_features": "None",
            "random_state": "None",
            "max_leaf_nodes": "None",
            "min_impurity_decrease": "0.0",
            "ccp_alpha": "0.0"
        }
    },
    {
        "full_name": "sklearn.tree.ExtraTreeClassifier",
        "name": "ExtraTreeClassifier",
        "params": {
            "criterion": "'gini'",
            "splitter": "'random'",
            "max_depth": "None",
            "min_samples_split": "2",
            "min_samples_leaf": "1",
            "min_weight_fraction_leaf": "0.0",
            "max_features": "'sqrt'",
            "random_state": "None",
            "max_leaf_nodes": "None",
            "min_impurity_decrease": "0.0",
            "class_weight": "None",
            "ccp_alpha": "0.0"
        }
    },
    {
        "full_name": "sklearn.tree.ExtraTreeRegressor",
        "name": "ExtraTreeRegressor",
        "params": {
            "criterion": "'squared_error'",
            "splitter": "'random'",
            "max_depth": "None",
            "min_samples_split": "2",
            "min_samples_leaf": "1",
            "min_weight_fraction_leaf": "0.0",
            "max_features": "1.0",
            "random_state": "None",
            "min_impurity_decrease": "0.0",
            "max_leaf_nodes": "None",
            "ccp_alpha": "0.0"
        }
    },
    {
        "full_name": "sklearn.tree.export_graphviz",
        "name": "export_graphviz",
        "params": {
            "decision_tree": null,
            "out_file": "None",
            "max_depth": "None",
            "feature_names": "None",
            "class_names": "None",
            "label": "'all'",
            "filled": "False",
            "leaves_parallel": "False",
            "impurity": "True",
            "node_ids": "False",
            "proportion": "False",
            "rotate": "False",
            "rounded": "False",
            "special_characters": "False",
            "precision": "3",
            "fontname": "'helvetica'"
        }
    },
    {
        "full_name": "sklearn.tree.export_text",
        "name": "export_text",
        "params": {
            "decision_tree": null,
            "feature_names": "None",
            "max_depth": "10",
            "spacing": "3",
            "decimals": "2",
            "show_weights": "False"
        }
    },
    {
        "full_name": "sklearn.tree.plot_tree",
        "name": "plot_tree",
        "params": {
            "decision_tree": null,
            "max_depth": "None",
            "feature_names": "None",
            "class_names": "None",
            "label": "'all'",
            "filled": "False",
            "impurity": "True",
            "node_ids": "False",
            "proportion": "False",
            "rounded": "False",
            "precision": "3",
            "ax": "None",
            "fontsize": "None"
        }
    },
    {
        "full_name": "sklearn.utils.Bunch",
        "name": "Bunch",
        "params": {
            "**kwargs": null
        }
    },
    {
        "full_name": "sklearn.utils.arrayfuncs.min_pos",
        "name": "min_pos",
        "params": {}
    },
    {
        "full_name": "sklearn.utils.as_float_array",
        "name": "as_float_array",
        "params": {
            "X": null,
            "copy": "True",
            "force_all_finite": "True"
        }
    },
    {
        "full_name": "sklearn.utils.assert_all_finite",
        "name": "assert_all_finite",
        "params": {
            "X": null,
            "allow_nan": "False",
            "estimator_name": "None",
            "input_name": "''"
        }
    },
    {
        "full_name": "sklearn.utils.check_X_y",
        "name": "check_X_y",
        "params": {
            "X": null,
            "y": null,
            "accept_sparse": "False",
            "accept_large_sparse": "True",
            "dtype": "'numeric'",
            "order": "None",
            "copy": "False",
            "force_all_finite": "True",
            "ensure_2d": "True",
            "allow_nd": "False",
            "multi_output": "False",
            "ensure_min_samples": "1",
            "ensure_min_features": "1",
            "y_numeric": "False",
            "estimator": "None"
        }
    },
    {
        "full_name": "sklearn.utils.check_array",
        "name": "check_array",
        "params": {
            "array": null,
            "accept_sparse": "False",
            "accept_large_sparse": "True",
            "dtype": "'numeric'",
            "order": "None",
            "copy": "False",
            "force_all_finite": "True",
            "ensure_2d": "True",
            "allow_nd": "False",
            "ensure_min_samples": "1",
            "ensure_min_features": "1",
            "estimator": "None",
            "input_name": "''"
        }
    },
    {
        "full_name": "sklearn.utils.check_scalar",
        "name": "check_scalar",
        "params": {
            "x": null,
            "name": null,
            "target_type": null,
            "min_val": "None",
            "max_val": "None",
            "include_boundaries": "'both'"
        }
    },
    {
        "full_name": "sklearn.utils.check_consistent_length",
        "name": "check_consistent_length",
        "params": {
            "*arrays": null
        }
    },
    {
        "full_name": "sklearn.utils.check_random_state",
        "name": "check_random_state",
        "params": {
            "seed": null
        }
    },
    {
        "full_name": "sklearn.utils.class_weight.compute_class_weight",
        "name": "compute_class_weight",
        "params": {
            "class_weight": null,
            "classes": null,
            "y": null
        }
    },
    {
        "full_name": "sklearn.utils.class_weight.compute_sample_weight",
        "name": "compute_sample_weight",
        "params": {
            "class_weight": null,
            "y": null,
            "indices": "None"
        }
    },
    {
        "full_name": "sklearn.utils.deprecated",
        "name": "deprecated",
        "params": {
            "extra": "''"
        }
    },
    {
        "full_name": "sklearn.utils.estimator_checks.check_estimator",
        "name": "check_estimator",
        "params": {
            "estimator": "None",
            "generate_only": "False",
            "Estimator": "'deprecated'"
        }
    },
    {
        "full_name": "sklearn.utils.estimator_checks.parametrize_with_checks",
        "name": "parametrize_with_checks",
        "params": {
            "estimators": null
        }
    },
    {
        "full_name": "sklearn.utils.estimator_html_repr",
        "name": "estimator_html_repr",
        "params": {
            "estimator": null
        }
    },
    {
        "full_name": "sklearn.utils.extmath.safe_sparse_dot",
        "name": "safe_sparse_dot",
        "params": {
            "a": null,
            "b": null,
            "dense_output": "False"
        }
    },
    {
        "full_name": "sklearn.utils.extmath.randomized_range_finder",
        "name": "randomized_range_finder",
        "params": {
            "A": null,
            "size": null,
            "n_iter": null,
            "power_iteration_normalizer": "'auto'",
            "random_state": "None"
        }
    },
    {
        "full_name": "sklearn.utils.extmath.randomized_svd",
        "name": "randomized_svd",
        "params": {
            "M": null,
            "n_components": null,
            "n_oversamples": "10",
            "n_iter": "'auto'",
            "power_iteration_normalizer": "'auto'",
            "transpose": "'auto'",
            "flip_sign": "True",
            "random_state": "'warn'"
        }
    },
    {
        "full_name": "sklearn.utils.extmath.fast_logdet",
        "name": "fast_logdet",
        "params": {
            "A": null
        }
    },
    {
        "full_name": "sklearn.utils.extmath.density",
        "name": "density",
        "params": {
            "w": null,
            "**kwargs": null
        }
    },
    {
        "full_name": "sklearn.utils.extmath.weighted_mode",
        "name": "weighted_mode",
        "params": {
            "a": null,
            "w": null,
            "axis": "0"
        }
    },
    {
        "full_name": "sklearn.utils.gen_batches",
        "name": "gen_batches",
        "params": {
            "n": null,
            "batch_size": null,
            "min_batch_size": "0"
        }
    },
    {
        "full_name": "sklearn.utils.gen_even_slices",
        "name": "gen_even_slices",
        "params": {
            "n": null,
            "n_packs": null,
            "n_samples": "None"
        }
    },
    {
        "full_name": "sklearn.utils.graph.single_source_shortest_path_length",
        "name": "single_source_shortest_path_length",
        "params": {
            "graph": null,
            "source": null,
            "cutoff": "None"
        }
    },
    {
        "full_name": "sklearn.utils.indexable",
        "name": "indexable",
        "params": {
            "*iterables": null
        }
    },
    {
        "full_name": "sklearn.utils.metaestimators.available_if",
        "name": "available_if",
        "params": {
            "check": null
        }
    },
    {
        "full_name": "sklearn.utils.multiclass.type_of_target",
        "name": "type_of_target",
        "params": {
            "y": null,
            "input_name": "''"
        }
    },
    {
        "full_name": "sklearn.utils.multiclass.is_multilabel",
        "name": "is_multilabel",
        "params": {
            "y": null
        }
    },
    {
        "full_name": "sklearn.utils.multiclass.unique_labels",
        "name": "unique_labels",
        "params": {
            "*ys": null
        }
    },
    {
        "full_name": "sklearn.utils.murmurhash3_32",
        "name": "murmurhash3_32",
        "params": {}
    },
    {
        "full_name": "sklearn.utils.resample",
        "name": "resample",
        "params": {
            "*arrays": null,
            "replace": "True",
            "n_samples": "None",
            "random_state": "None",
            "stratify": "None"
        }
    },
    {
        "full_name": "sklearn.utils._safe_indexing",
        "name": "_safe_indexing",
        "params": {
            "X": null,
            "indices": null,
            "axis": "0"
        }
    },
    {
        "full_name": "sklearn.utils.safe_mask",
        "name": "safe_mask",
        "params": {
            "X": null,
            "mask": null
        }
    },
    {
        "full_name": "sklearn.utils.safe_sqr",
        "name": "safe_sqr",
        "params": {
            "X": null,
            "copy": "True"
        }
    },
    {
        "full_name": "sklearn.utils.shuffle",
        "name": "shuffle",
        "params": {
            "*arrays": null,
            "random_state": "None",
            "n_samples": "None"
        }
    },
    {
        "full_name": "sklearn.utils.sparsefuncs.incr_mean_variance_axis",
        "name": "incr_mean_variance_axis",
        "params": {
            "X": null,
            "axis": null,
            "last_mean": null,
            "last_var": null,
            "last_n": null,
            "weights": "None"
        }
    },
    {
        "full_name": "sklearn.utils.sparsefuncs.inplace_column_scale",
        "name": "inplace_column_scale",
        "params": {
            "X": null,
            "scale": null
        }
    },
    {
        "full_name": "sklearn.utils.sparsefuncs.inplace_row_scale",
        "name": "inplace_row_scale",
        "params": {
            "X": null,
            "scale": null
        }
    },
    {
        "full_name": "sklearn.utils.sparsefuncs.inplace_swap_row",
        "name": "inplace_swap_row",
        "params": {
            "X": null,
            "m": null,
            "n": null
        }
    },
    {
        "full_name": "sklearn.utils.sparsefuncs.inplace_swap_column",
        "name": "inplace_swap_column",
        "params": {
            "X": null,
            "m": null,
            "n": null
        }
    },
    {
        "full_name": "sklearn.utils.sparsefuncs.mean_variance_axis",
        "name": "mean_variance_axis",
        "params": {
            "X": null,
            "axis": null,
            "weights": "None",
            "return_sum_weights": "False"
        }
    },
    {
        "full_name": "sklearn.utils.sparsefuncs.inplace_csr_column_scale",
        "name": "inplace_csr_column_scale",
        "params": {
            "X": null,
            "scale": null
        }
    },
    {
        "full_name": "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1",
        "name": "inplace_csr_row_normalize_l1",
        "params": {}
    },
    {
        "full_name": "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2",
        "name": "inplace_csr_row_normalize_l2",
        "params": {}
    },
    {
        "full_name": "sklearn.utils.random.sample_without_replacement",
        "name": "sample_without_replacement",
        "params": {}
    },
    {
        "full_name": "sklearn.utils.validation.check_is_fitted",
        "name": "check_is_fitted",
        "params": {
            "estimator": null,
            "attributes": "None",
            "msg": "None",
            "all_or_any": "<built-in function all>"
        }
    },
    {
        "full_name": "sklearn.utils.validation.check_memory",
        "name": "check_memory",
        "params": {
            "memory": null
        }
    },
    {
        "full_name": "sklearn.utils.validation.check_symmetric",
        "name": "check_symmetric",
        "params": {
            "array": null,
            "tol": "1e-10",
            "raise_warning": "True",
            "raise_exception": "False"
        }
    },
    {
        "full_name": "sklearn.utils.validation.column_or_1d",
        "name": "column_or_1d",
        "params": {
            "y": null,
            "warn": "False"
        }
    },
    {
        "full_name": "sklearn.utils.validation.has_fit_parameter",
        "name": "has_fit_parameter",
        "params": {
            "estimator": null,
            "parameter": null
        }
    },
    {
        "full_name": "sklearn.utils.all_estimators",
        "name": "all_estimators",
        "params": {
            "type_filter": "None"
        }
    },
    {
        "full_name": "sklearn.utils.parallel_backend",
        "name": "parallel_backend",
        "params": {
            "backend": null,
            "n_jobs": "- 1",
            "inner_max_num_threads": "None",
            "**backend_params": null
        }
    },
    {
        "full_name": "sklearn.utils.register_parallel_backend",
        "name": "register_parallel_backend",
        "params": {
            "name": null,
            "factory": null,
            "make_default": "False"
        }
    },
    {
        "full_name": "sklearn.utils.metaestimators.if_delegate_has_method",
        "name": "if_delegate_has_method",
        "params": {
            "delegate": null
        }
    }
]